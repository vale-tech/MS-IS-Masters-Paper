getwd()
install.packages("RODBC")
library(RODBC)
cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;trusted_connection=yes;")
?odbcDriverConnect
cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;")
hospitalData <- dataFetchEUR <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000)
View(hospitalData)
?sqlFetch
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = TRUE)
View(hospitalData)
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000)
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = TRUE)
cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = TRUE)
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000)
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2))
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000)
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is=FALSE)
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is=TRUE)
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is=FALSE)
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 30, 31, 32, 33, 34, 35, 36))
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 31, 32, 33, 34, 35, 36))
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36))
summary(hospitalData)
hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors)
summary(hospitalData)
hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score)
summary(hospitalData$Total_HAC_Score)
hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36))
hospitalData$Total_HAC_Score
unique(hospitalData$Total_HAC_Score)
hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score)
unique(hospitalData$Total_HAC_Score)
summary(hospitalData)
plot(hospitalData$FullTimeEmployees)
boxplot(hospitalData$FullTimeEmployees)
boxplot(log(hospitalData$FullTimeEmployees))
summary(hospitalData$FullTimeISEmployees)
summary(hospitalData$FullTimeEmployees)
summary(log(hospitalData$FullTimeEmployees))
if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') }
library(car) dev.off() qqPlot(log(hospitalData$FullTimeEmployees))
qqPlot(hospitalData$FullTimeEmployees)
qqPlot(log(hospitalData$FullTimeEmployees))
library(psych)
if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') }
library(psych)
describe(hospitalData)
describe(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors)
describe.by(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors)
warnings()
describeBy(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors)
warnings()
describe(hospitalData)
warnings()
?describe
describe(hospitalData, skew = FALSE)
describe(hospitalData, skew = FALSE, check = FALSE)
describe(hospitalData, skew = FALSE)
install.packages("RODBC") library(RODBC) cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) summary(hospitalData$Total_HAC_Score) boxplot(log(hospitalData$FullTimeEmployees)) if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } library(car) dev.off() qqPlot(log(hospitalData$FullTimeEmployees)) qqPlot(hospitalData$FullTimeEmployees) if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } library(psych) describe(hospitalData, skew = FALSE)
install.packages("RODBC") library(RODBC) cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) summary(hospitalData$Total_HAC_Score) boxplot(log(hospitalData$FullTimeEmployees)) if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } library(car) dev.off() qqPlot(log(hospitalData$FullTimeEmployees)) qqPlot(hospitalData$FullTimeEmployees) if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } library(psych) describe(hospitalData, skew = FALSE)
qqPlot(hospitalData$NofBeds)
describeBy(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors)
qqPlot(log(hospitalData$NofBeds))
library(RODBC) cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) summary(hospitalData$Total_HAC_Score) boxplot(log(hospitalData$FullTimeEmployees)) if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } library(car) dev.off() qqPlot(log(hospitalData$FullTimeEmployees)) qqPlot(hospitalData$FullTimeEmployees) if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } library(psych) describe(hospitalData, skew = FALSE)
qqPlot(hospitalData$NofBeds)
qqPlot(hospitalData$FullTimeEmployees)
qqPlot(log(hospitalData$FullTimeEmployees))
describeBy(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors)
describeBy(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors, skew = FALSE)
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     #install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } if (!('sjPlot' %in% rownames(installed.packages()))) {     install.packages('sjPlot') } # Load necessary libraries library(RODBC) library(car) library(psych) library(sjPlot)
library(sjPlot)
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     #install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } if (!('sjPlot' %in% rownames(installed.packages()))) {     install.packages('sjPlot') }
library(RODBC) library(car) library(psych) library(sjPlot)
cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) #dev.off() # qqPlot(log(hospitalData$FullTimeEmployees)) # qqPlot(hospitalData$FullTimeEmployees) # generate summary data describe(hospitalData, skew = FALSE) describeBy(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors, skew = FALSE)
variables <- sji.getVariableLables(hospitalData)
?sjPlot
sjt.frq(hospitalData$ISPlanCommittedToReduceMedicalErrors)
if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') }
library(summarytools)
freq(hospitalData$ISPlanCommittedToReduceMedicalErrors)
freq(hospitalData$ISPlanCommittedToReduceMedicalErrors, style = 'rmarkdown')
freq(hospitalData$ISPlanCommittedToReduceMedicalErrors, style = 'rmarkdown')
freq(hospitalData$ISPlanCommittedToReduceMedicalErrors)
?descr
descr(hospitalData$NofBeds, style = "rmarkdown")
descr(hospitalData$NofBeds, style = "rmarkdown", transpose = TRUE)
test <- descr(hospitalData$NofBeds, style = "rmarkdown", transpose = TRUE)
test$stats
test$stats$mean
test$stats$Mean
test2 <- test$observ[,-9]
test2 <- test$stats[,-1]
test$stats$[, -6:-11]
test$stats[, -6:-11]
test$stats[, -6:-11]
test
test2 <- test$stats[, -6:-11]
test2
test
test3 <- test
test3
test3$stats$Kurtosis <- NULL
test3
descr(hospitalData$NofBeds, transpose = TRUE)
test <- descr(hospitalData$NofBeds, transpose = TRUE)
test
attr(test)
attributes(test)
test <- descr(hospitalData$NofBeds, transpose = TRUE, style = "rmarkdown")
attributes(test)
test
what.is(test)
attributes(test)
library(RODBC) library(car) library(psych) library(sjPlot) library(summarytools)
cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36))
output <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE)
output$stats[,6:11] <- list(NULL)
output
descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) %>% .$stats
if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') }
library(dplyr)
descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) %>% .$stats
descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE)
output
if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') }
library(pander)
output$stats
pandoc.table(output$stats)
pandoc.table(output$stats, style = "rmarkdown")
attributes(output$stats)
output$stats$row.names[1]
output$stats$row.names[1,]
output$stats$names
attr(output$stats, "row.names")
attr(output$stats, "row.names[1]")
attr(output$stats, "row.names[0]")
attr(output$stats, "row.names")
attr(output$stats, "row.names") <- "Number of Beds"
attr(output$stats, "row.names")
pandoc.table(output$stats, style = "rmarkdown")
pandoc.table(output$stats, style = "rmarkdown")
attributes(output$stats)
hospitalData$ISPlanCommittedToReduceMedicalErrors
hospitalDataTemp <- hospitalData
hospitalDataTemp %>% mutate(PlanToReduceErrors = ifelse(IsPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed"))
hospitalDataTemp %>% mutate(PlanToReduceErrors = ifelse(.$IsPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed"))
hospitalDataTemp %>% .$IsPlanCommittedToReduceMedicalErrors
hospitalDataTemp %>% IsPlanCommittedToReduceMedicalErrors
hospitalDataTemp %>% .IsPlanCommittedToReduceMedicalErrors
hospitalDataTemp %>% .ISPlanCommittedToReduceMedicalErrors
hospitalDataTemp %>% .$ISPlanCommittedToReduceMedicalErrors
hospitalDataTemp %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed"))
hospitalDataTemp <- hospitalDataTemp %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed"))
hospitalDataTemp$PlanToReduceErrors <- as.factor(hospitalDataTemp$PlanToReduceErrors)
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     #install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } if (!('sjPlot' %in% rownames(installed.packages()))) {     install.packages('sjPlot') } if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } # Load necessary libraries library(RODBC) library(car) library(psych) library(sjPlot) library(summarytools) library(dplyr) library(pander) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Feature generation hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors)
view(dfSummary(hospitalData))
hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100", "More than 100")) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory)
hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 100 & .$NofBeds <= 200, "101-200", "More"))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory)
hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300", "More")))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory)
hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory)
view(dfSummary(hospitalData))
hospitalData <- hospitalData[,"Latitude"]
cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36))
hospitalData <- hospitalData[,-"Latitude"]
hospitalData <- hospitalData[,-c("Latitude")]
hospitalData <- select(hospitalData, ISPlanCommittedtoReduceMedicalErrors)
hospitalData <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors)
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     #install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } if (!('sjPlot' %in% rownames(installed.packages()))) {     install.packages('sjPlot') } if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } # Load necessary libraries library(RODBC) library(car) library(psych) library(sjPlot) library(summarytools) library(dplyr) library(pander) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Select only desired columns hospitalData <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # Grouping
view(dfSummary(hospitalData))
plot(hospitalData$NofBedsCategory)
complete <- hospitalData[complete.cases(hospitalData),]
vied(dfSummary(complete))
view(dfSummary(complete))
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     #install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } if (!('sjPlot' %in% rownames(installed.packages()))) {     install.packages('sjPlot') } if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } # Load necessary libraries library(RODBC) library(car) library(psych) library(sjPlot) library(summarytools) library(dplyr) library(pander) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Select only desired columns hospitalData <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter to only complete cases hospitalData <- hospitalData[complete.cases(hospitalData),] # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (TEMPORARY) view(dfSummary(hospitalData)) # Grouping
group_by(hospitalData, PlanToReduceErrors)
view(dfSummary(group_by(hospitalData, PlanToReduceErrors)))
test <- group_by(hospitalData, PlanToReduceErrors)
summary(test)
describe.by(hospitalData, PlanToReduceErrors)
describeBy(hospitalData, hospitalData$PlanToReduceErrors)
test <- describeBy(hospitalData, hospitalData$PlanToReduceErrors)
test
test$Committed
Committed <- test$Committed
attributes(Committed)
Committed["FullTimeEmployees"]
x <- data.frame(a = 1:5, b = 6:10, d = 11:15)
attributes(x)
Committed["FullTimeEmployees", ]
hospitalData %>% group_by(PlanToReduceErrors)
hospitalData %>% group_by(PlanToReduceErrors) %>% summarise()
hospitalData %>% group_by(PlanToReduceErrors) %>% summarise(.)
freq(hospitalData$NofBedsCategory)
CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0")
describe(CommittedRows)
CommittedRows.summary <- describe(CommittedRows, skew = FALSE)
CommittedRows.summary
NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE)
# Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Select only desired columns hospitalData <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score)
hospitalData <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score)
hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score)
hospitalData <- hospitalData[complete.cases(hospitalData),]
hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),]
cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Select only desired columns #hospitalData <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Hospital Demographics hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) # Hospital Data hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score)
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns #hospitalData <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Hospital Demographics hospitalData <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) # Hospital Data hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter to only complete cases # hospitalData.Demo <- hospitalData.Demo[complete.cases(hospitalData.Demo),] hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (TEMPORARY) view(dfSummary(hospitalData)) view(dfSummary(hospitalData.Data))
# Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns #hospitalData <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Hospital Demographics hospitalData <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) # Hospital Data hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter to only complete cases # hospitalData.Demo <- hospitalData.Demo[complete.cases(hospitalData.Demo),] hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (DEBUG) # view(dfSummary(hospitalData)) # view(dfSummary(hospitalData.Data)) # Recombine data hospitalData <- inner_join(hospitalData, hospitalData.Data, by = "HospitalUniqueId") # VIEW (DEBUG) view(dfSummary(hospitalData))
cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score)
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score)
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Data, hospitalData.Demo, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (TEMPORARY) view(dfSummary(hospitalData))
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (DEBUG) view(dfSummary(hospitalData)) # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors = "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors = "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) #####END DATA CONSTRUCTION # Summary Output # Vizualiztion # T-Tests # T-Test output
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (DEBUG) view(dfSummary(hospitalData)) # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) #####END DATA CONSTRUCTION # Summary Output # Vizualiztion # T-Tests # T-Test output
NonCommittedRows.summary
if (!('ggplot' %in% rownames(installed.packages()))) {     install.packages('ggplot') }
library(ggplot)
if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') }
library(ggplot2)
ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds)) +     geom_bar(stat = "identity", position = position_dodge(), colour = "black")
ggplot(data = hospitalData, aes(x = hospitalData$PlanToReduceErrors, y = hospitalData$NofBeds)) +     geom_bar(stat = "identity", position = position_dodge(), colour = "black")
hospitalDatahospitalData
hospitalData
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (DEBUG) # view(dfSummary(hospitalData)) # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE)
hospitalData
ggplot(data = hospitalData, aes(x = hospitalData$PlanToReduceErrors, y = hospitalData$NofBeds)) +     geom_bar(stat = "identity", position = position_dodge(), colour = "black")
ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds)) +     geom_bar(stat = "identity", position = position_dodge(), colour = "black")
dat1 <- data.frame(     sex = factor(c("Female", "Female", "Male", "Male")),     time = factor(c("Lunch", "Dinner", "Lunch", "Dinner"), levels = c("Lunch", "Dinner")),     total_bill = c(13.53, 16.81, 16.24, 17.42) ) dat1
ggplot(data = dat1, aes(x = time, y = total_bill, fill = sex)) +     geom_bar(stat = "identity", position = position_dodge())
ggplot(data = dat1, aes(x = time, y = total_bill)) +     geom_bar(stat = "identity", position = position_dodge())
ggplot(data = dat1, aes(x = time, y = total_bill, fill = sex)) +     geom_bar(stat = "identity", position = position_dodge())
ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds)) +     geom_bar(stat = "identity", position = position_dodge(), colour = "black")
ggplot(data = dat1, aes(x = time, y = total_bill, fill = sex)) +     geom_bar(stat = "identity", position = position_dodge())
ggplot(data = dat1, aes(x = time, y = total_bill)) +     geom_bar(stat = "identity", position = position_dodge(), colour = "black")
ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds)) +     geom_bar(stat = "identity", position = position_dodge(), colour = "black")
hist(hospitalData$NofBeds)
ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds)) +     geom_bar(stat = "average", position = position_dodge(), colour = "black")
ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds)) +     geom_bar(stat = "identity", position = position_dodge(), colour = "black")
ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds)) +     geom_bar(stat = "identity", position = position_dodge(), colour = "black")
ggplot(data = dat1, aes(x = time, y = total_bill)) +     geom_bar(stat = "identity", position = position_dodge(), colour = "black")
dev.off()
ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds)) +     geom_bar(stat = "identity", position = position_dodge(), colour = "black")
ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds)) +     geom_bar(stat = "identity", position = position_dodge(), colour = "black")
ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds)) +     geom_bar(stat = "summary", fun.y = "mean", position = position_dodge(), colour = "black")
ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds, fill = OrgControlOverall)) +     geom_bar(stat = "summary", fun.y = "mean", position = position_dodge(), colour = "black")
ggplot(hospitalData, aes(x = NofBeds)) +     geom_histogram()
ggplot(NonCommittedRows, aes(x = NofBeds)) +     geom_histogram()
ggplot(CommittedRows, aes(x = NofBeds)) +     geom_histogram()
CommittedRows.summary
descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE)
descr(c(hospitalData$NofBeds, hospitalData$NofSurgicalOperations), style = 'rmarkdown', transpose = TRUE)
output <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) output$stats[, 6:11] <- list(NULL) attr(output$stats, "row.names") <- "Number of Beds"
summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(output$stats, "row.names") <- "Number of Beds"
summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds"
r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures"
r2$stats
r2$stats["Number of Surgical Procedures",]
temp <- rbind(summaryTable$stats, r2$stats)
temp
pandoc.table(summaryTable$stats, style = 'rmarkdown')
pandoc.table(temp, style = 'rmarkdown')
summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats)
summaryTable
summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable$stats, r3$stats)
summaryTable
summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats)
summaryTable
pandoc.table(summaryTable, style = "rmarkdown")
pandoc.table(summaryTable, style = "rmarkdown", split.tables = "inf")
pandoc.table(summaryTable, style = "rmarkdown", split.tables = "inf")
pandoc.table(summaryTable, style = "rmarkdown")
pandoc.table(summaryTable, style = "rmarkdown", split.tables = "inf")
summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats)
# NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRowsRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRowsRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRowsRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats)
summaryTable.NC <- descr(NonCommittedRowsRows$NofBeds, style = 'rmarkdown', transpose = TRUE)
# NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats)
ggplot(CommittedRows, aes(x = NofBedsCategory)) +     geom_histogram()
ggplot(CommittedRows, aes(x = NofBedsCategory)) +     geom_histogram(state="count")
summaryTable$Mean
summaryTable.C$Mean
t.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds)
t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score)
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') }
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') }
install.packages("rmarkdown", lib="C:/Program Files/Microsoft/R Client/R_SERVER/library")
library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2)
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (DEBUG) # view(dfSummary(hospitalData)) # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats)
rm(r2, envir = as.environment(".GlobalEnv"))
ggplot(CommittedRows, aes(x = NofBeds)) +     geom_histogram()
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (DEBUG) # view(dfSummary(hospitalData)) # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats)
ggplot(CommittedRows, aes(x = NofBeds)) +     geom_histogram()
ggplot(CommittedRows, aes(x = NofBedsCategory)) +     geom_bar()
ggplot(hospitalData, aes(x = NofBedsCategory)) +     geom_bar()
ggplot(hospitalData, aes(x = NofBedsCategory, fill = PlanToReduceErrors)) +     geom_bar()
t.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds)
NofBeds.Equal <- t.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds)
if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') }
library(BSDA)
NofBeds.Equal <- t.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds)
NofBeds.Equal <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds)
NofBeds.Equal <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds)
?z.test
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (DEBUG) # view(dfSummary(hospitalData)) # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats)
?z.test
NofBeds.Equal <- z.test(CommittedRows$NofBeds, y = NonCommittedRows$NofBeds, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds))
NofBeds.Equal
z.test(CommittedRows$NofBeds, y = NonCommittedRows$NofBeds, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) t.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds)
# Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (DEBUG) view(dfSummary(hospitalData)) # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) #####END DATA CONSTRUCTION
dfSummary(hospitalData)
cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) #hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory)
cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) #hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score)
cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) #hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain1_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId")
unique(hospitalData$Domain1_Score)
unique(hospitalData$Domain2_Score)> unique(hospitalData$Domain2_Score)
unique(hospitalData$Domain2_Score)
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (DEBUG) view(dfSummary(hospitalData)) # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) #####END DATA CONSTRUCTION
?view
view(dfSummary(hospitalData), method = "browser")
view(dfSummary(hospitalData), method = "browser")
dfSummary(hospitalData)
myData <- dfSummary(hospitalData)
str(myData)
pandoc.table(myData, style = "rmarkdown")
pandoc.table(myData, style = "grid")
myData <- dfSummary(hospitalData, style = "simple")
myData
myData
myData <- dfSummary(hospitalData, style = "grid")
myData
pandoc.table(myData)
myData.Predictors <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, NofBeds, NofSurgicalOperations, FullTimeEmployees, OrgControlOverall, OrgControlDetail) myData.Response <- hospitalData %>% select(Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score)
myData.Predictors.Summary <- dfSummary(myData.Predictors, style = "grid")
view(dfSummary(myData.Predictors, style = "grid"))
view(dfSummary(myData.Response, style = "grid"))
ggplot(hospitalData, aes(x = NofBedsCategory, fill = ISPlanCommittedToReduceMedicalErrors)) +     geom_bar()
ggplot(hospitalData, aes(x = NofBedsCategory, fill = ISPlanCommittedToReduceMedicalErrors)) +     geom_bar()
ggplot(myData.Predictors, aes(x = ISPlanCommittedToReduceMedicalErrors)) +     geom_bar()
myData.Predictors <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, NofBeds, NofSurgicalOperations, FullTimeEmployees, OrgControlOverall, OrgControlDetail) myData.Response <- hospitalData %>% select(Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) myData.Predictors.Summary <- dfSummary(myData.Predictors, style = "grid") myData.Predictors.Response <- dfSummary(myData.Response, style = "grid")
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (DEBUG) view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) #####END DATA CONSTRUCTION # Summary Output # Vizualiztion ggplot(CommittedRows, aes(x = NofBeds)) +     geom_histogram() # bar chart for beds ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds, fill = OrgControlOverall)) +     geom_bar(stat = "summary", fun.y = "mean", position = position_dodge(), colour = "black") z.test(CommittedRows$NofBeds, y = NonCommittedRows$NofBeds, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) t.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds) # T-Test output
myData.Predictors <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, NofBeds, NofSurgicalOperations, FullTimeEmployees, OrgControlOverall, OrgControlDetail) myData.Response <- hospitalData %>% select(Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) myData.Predictors.Summary <- dfSummary(myData.Predictors, style = "grid") myData.Predictors.Response <- dfSummary(myData.Response, style = "grid")
ggplot(myData.Predictors, aes(x = ISPlanCommittedToReduceMedicalErrors)) +     geom_bar()
ggplot(CommittedRows, aes(x = NofBeds)) +     geom_histogram()
ggplot(CommittedRows, aes(x = NofBeds)) +     geom_bar()
ggplot(myData.Predictors, aes(x = ISPlanCommittedToReduceMedicalErrors)) +     geom_histogram()
ggplot(CommittedRows, aes(x = NofSurgicalOperations)) +     geom_histogram()
ggplot(CommittedRows, aes(x = FullTimeEmployees)) +     geom_histogram()
ggplot(myData.Predictors, aes(x = OrgControlOverall)) +     geom_bar()
ggplot(myData.Predictors, aes(x = OrgControlDetail)) +     geom_bar()
ggplot(CommittedRows, aes(x = Domain2_Score)) +     geom_histogram()
ggplot(CommittedRows, aes(x = Total_HAC_Score)) +     geom_histogram()
ggplot(CommittedRows, aes(x = PSI_12_POSTOP_PULMEMB_DVT_Score)) +     geom_histogram()
ggplot(CommittedRows, aes(x = PSI_14_POSTOP_DEHIS_Score)) +     geom_histogram() ggplot(CommittedRows, aes(x = PSI_15_ACC_LAC_Score)) +     geom_histogram() ggplot(CommittedRows, aes(x = PSI_4_SURG_COMP_Score)) +     geom_histogram() ggplot(CommittedRows, aes(x = PSI_6_IAT_PTX_Score)) +     geom_histogram() ggplot(CommittedRows, aes(x = PSI_90_SAFETY_Score)) +     geom_histogram()
myData.Response.Summary <- dfSummary(myData.Response, style = "grid")
t.test(myData.Response$Domain2_Score)
t.test(myData.Response$Total_HAC_Score) t.test(myData.Response$PSI_12_POSTOP_PULMEMB_DVT_Score) t.test(myData.Response$PSI_14_POSTOP_DEHIS_Score) t.test(myData.Response$PSI_15_ACC_LAC_Score) t.test(myData.Response$PSI_4_SURG_COMP_Score) t.test(myData.Response$PSI_6_IAT_PTX_Score) t.test(myData.Response$PSI_90_SAFETY_Score)
t.test(myData.Response$NofBeds) t.test(myData.Response$NofSurgicalOperations) t.test(myData.Response$FullTimeEmployees)
t.test(myData.Predictors$NofBeds) t.test(myData.Predictors$NofSurgicalOperations) t.test(myData.Predictors$FullTimeEmployees)
x <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") y <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0")
t.test(x$Domain2_Score, y$Domain2_Score)
t.test(x$Total_HAC_Score, y$Total_HAC_Score)
t.test(x$PSI_12_POSTOP_PULMEMB_DVT_Score, y$PSI_12_POSTOP_PULMEMB_DVT_Score)
t.test(x$PSI_14_POSTOP_DEHIS_Score, y$PSI_14_POSTOP_DEHIS_Score)
t.test(x$PSI_15_ACC_LAC_Score, y$PSI_15_ACC_LAC_Score)
t.test(x$PSI_4_SURG_COMP_Score, y$PSI_4_SURG_COMP_Score)
t.test(x$PSI_6_IAT_PTX_Score, y$PSI_6_IAT_PTX_Score)
t.test(x$PSI_90_SAFETY_Score, y$PSI_90_SAFETY_Score)
view(dfSummary(hospitalData))
x <- subset(hospitalData, select = c("OrgControlOverall", "Domain2_Score", "Total_HAC_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_4_SURG_COMP_Score", "PSI_6_IAT_PTX_Score", "PSI_90_SAFETY_Score"))
x
aov.out <- aov(x$Domain2_Score ~ x$OrgControlOverall)
summary(aov.out)
aov.out <- aov(x$Total_HAC_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_12_POSTOP_PULMEMB_DVT_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$Domain2_Score ~ x$PSI_14_POSTOP_DEHIS_Score) summary(aov.out)
aov.out <- aov(x$Domain2_Score ~ x$PSI_15_ACC_LAC_Score) summary(aov.out)
aov.out <- aov(x$Domain2_Score ~ x$PSI_4_SURG_COMP_Score) summary(aov.out)
aov.out <- aov(x$PSI_14_POSTOP_DEHIS_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_15_ACC_LAC_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_4_SURG_COMP_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_6_IAT_PTX_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_90_SAFETY_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$Total_HAC_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_90_SAFETY_Score ~ x$OrgControlOverall) summary(aov.out)
ggplot(myData.Predictors, aes(x = ISPlanCommittedToReduceMedicalErrors)) +     geom_bar() ggplot(myData.Predictors, aes(x = NofBeds)) +     geom_histogram() ggplot(myData.Predictors, aes(x = NofSurgicalOperations)) +     geom_histogram() ggplot(myData.Predictors, aes(x = FullTimeEmployees)) +     geom_histogram() ggplot(myData.Predictors, aes(x = OrgControlOverall)) +     geom_bar() ggplot(myData.Predictors, aes(x = OrgControlDetail)) +     geom_bar()
ggplot(myData.Response, aes(x = Domain2_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = Total_HAC_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = PSI_12_POSTOP_PULMEMB_DVT_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = PSI_14_POSTOP_DEHIS_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = PSI_15_ACC_LAC_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = PSI_4_SURG_COMP_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = PSI_6_IAT_PTX_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = PSI_90_SAFETY_Score)) +     geom_histogram()
x <- subset(hospitalData, select = c("OrgControlDetail ", "Domain2_Score", "Total_HAC_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_4_SURG_COMP_Score", "PSI_6_IAT_PTX_Score", "PSI_90_SAFETY_Score")) #Domain2_Score aov.out <- aov(x$Domain2_Score ~ x$OrgControlDetail ) summary(aov.out) #Total_HAC_Score  aov.out <- aov(x$Total_HAC_Score ~ x$OrgControlDetail ) summary(aov.out) #PSI_12_POSTOP_PULMEMB_DVT_Score  aov.out <- aov(x$PSI_12_POSTOP_PULMEMB_DVT_Score ~ x$OrgControlDetail ) summary(aov.out) #PSI_14_POSTOP_DEHIS_Score  aov.out <- aov(x$PSI_14_POSTOP_DEHIS_Score ~ x$OrgControlDetail ) summary(aov.out) #PSI_15_ACC_LAC_Score  aov.out <- aov(x$PSI_15_ACC_LAC_Score ~ x$OrgControlDetail ) summary(aov.out) #PSI_4_SURG_COMP_Score aov.out <- aov(x$PSI_4_SURG_COMP_Score ~ x$OrgControlDetail ) summary(aov.out) #PSI_6_IAT_PTX_Score  aov.out <- aov(x$PSI_6_IAT_PTX_Score ~ x$OrgControlDetail ) summary(aov.out) #PSI_90_SAFETY_Score  aov.out <- aov(x$PSI_90_SAFETY_Score ~ x$OrgControlDetail ) summary(aov.out)
x <- subset(hospitalData, select = c("OrgControlDetail ", "Domain2_Score", "Total_HAC_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_4_SURG_COMP_Score", "PSI_6_IAT_PTX_Score", "PSI_90_SAFETY_Score"))
x <- subset(hospitalData, select = c("OrgControlDetail", "Domain2_Score", "Total_HAC_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_4_SURG_COMP_Score", "PSI_6_IAT_PTX_Score", "PSI_90_SAFETY_Score"))
aov.out <- aov(x$Domain2_Score ~ x$OrgControlDetail ) summary(aov.out) #Total_HAC_Score  aov.out <- aov(x$Total_HAC_Score ~ x$OrgControlDetail ) summary(aov.out) #PSI_12_POSTOP_PULMEMB_DVT_Score  aov.out <- aov(x$PSI_12_POSTOP_PULMEMB_DVT_Score ~ x$OrgControlDetail ) summary(aov.out) #PSI_14_POSTOP_DEHIS_Score  aov.out <- aov(x$PSI_14_POSTOP_DEHIS_Score ~ x$OrgControlDetail ) summary(aov.out) #PSI_15_ACC_LAC_Score  aov.out <- aov(x$PSI_15_ACC_LAC_Score ~ x$OrgControlDetail ) summary(aov.out) #PSI_4_SURG_COMP_Score aov.out <- aov(x$PSI_4_SURG_COMP_Score ~ x$OrgControlDetail ) summary(aov.out) #PSI_6_IAT_PTX_Score  aov.out <- aov(x$PSI_6_IAT_PTX_Score ~ x$OrgControlDetail ) summary(aov.out) #PSI_90_SAFETY_Score  aov.out <- aov(x$PSI_90_SAFETY_Score ~ x$OrgControlDetail ) summary(aov.out)
aov.out <- aov(x$Domain2_Score ~ x$OrgControlOverall) summary(aov.out) #Total_HAC_Score  aov.out <- aov(x$Total_HAC_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_12_POSTOP_PULMEMB_DVT_Score  aov.out <- aov(x$PSI_12_POSTOP_PULMEMB_DVT_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_14_POSTOP_DEHIS_Score  aov.out <- aov(x$PSI_14_POSTOP_DEHIS_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_15_ACC_LAC_Score  aov.out <- aov(x$PSI_15_ACC_LAC_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_4_SURG_COMP_Score aov.out <- aov(x$PSI_4_SURG_COMP_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_6_IAT_PTX_Score  aov.out <- aov(x$PSI_6_IAT_PTX_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_90_SAFETY_Score  aov.out <- aov(x$PSI_90_SAFETY_Score ~ x$OrgControlOverall) summary(aov.out)
x <- subset(hospitalData, select = c("OrgControlOverall", "Domain2_Score", "Total_HAC_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_4_SURG_COMP_Score", "PSI_6_IAT_PTX_Score", "PSI_90_SAFETY_Score")) #Domain2_Score aov.out <- aov(x$Domain2_Score ~ x$OrgControlOverall) summary(aov.out) #Total_HAC_Score  aov.out <- aov(x$Total_HAC_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_12_POSTOP_PULMEMB_DVT_Score  aov.out <- aov(x$PSI_12_POSTOP_PULMEMB_DVT_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_14_POSTOP_DEHIS_Score  aov.out <- aov(x$PSI_14_POSTOP_DEHIS_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_15_ACC_LAC_Score  aov.out <- aov(x$PSI_15_ACC_LAC_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_4_SURG_COMP_Score aov.out <- aov(x$PSI_4_SURG_COMP_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_6_IAT_PTX_Score  aov.out <- aov(x$PSI_6_IAT_PTX_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_90_SAFETY_Score  aov.out <- aov(x$PSI_90_SAFETY_Score ~ x$OrgControlOverall) summary(aov.out)
x <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1")
x <- subset(x, select = c("OrgControlOverall", "Domain2_Score", "Total_HAC_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_4_SURG_COMP_Score", "PSI_6_IAT_PTX_Score", "PSI_90_SAFETY_Score"))
aov.out <- aov(x$Domain2_Score ~ x$OrgControlOverall) summary(aov.out) #Total_HAC_Score  aov.out <- aov(x$Total_HAC_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_12_POSTOP_PULMEMB_DVT_Score  aov.out <- aov(x$PSI_12_POSTOP_PULMEMB_DVT_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_14_POSTOP_DEHIS_Score  aov.out <- aov(x$PSI_14_POSTOP_DEHIS_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_15_ACC_LAC_Score  aov.out <- aov(x$PSI_15_ACC_LAC_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_4_SURG_COMP_Score aov.out <- aov(x$PSI_4_SURG_COMP_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_6_IAT_PTX_Score  aov.out <- aov(x$PSI_6_IAT_PTX_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_90_SAFETY_Score  aov.out <- aov(x$PSI_90_SAFETY_Score ~ x$OrgControlOverall) summary(aov.out)
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA)
cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36))
hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors)
hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score)
hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score)
hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId)
hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score)
hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),]
hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId")
# Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # VIEW (DEBUG) view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) #####END DATA CONSTRUCTION # Summary Output # Vizualiztion ggplot(CommittedRows, aes(x = NofBeds)) +     geom_histogram() # bar chart for beds ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds, fill = OrgControlOverall)) +     geom_bar(stat = "summary", fun.y = "mean", position = position_dodge(), colour = "black") z.test(CommittedRows$NofBeds, y = NonCommittedRows$NofBeds, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) t.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds) # T-Test output
myData.Predictors <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, NofBeds, NofSurgicalOperations, FullTimeEmployees, OrgControlOverall, OrgControlDetail) myData.Response <- hospitalData %>% select(Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score)
myData.Predictors.Summary <- dfSummary(myData.Predictors, style = "grid") myData.Response.Summary <- dfSummary(myData.Response, style = "grid")
ggplot(myData.Predictors, aes(x = ISPlanCommittedToReduceMedicalErrors)) +     geom_bar() ggplot(myData.Predictors, aes(x = NofBeds)) +     geom_histogram() ggplot(myData.Predictors, aes(x = NofSurgicalOperations)) +     geom_histogram() ggplot(myData.Predictors, aes(x = FullTimeEmployees)) +     geom_histogram() ggplot(myData.Predictors, aes(x = OrgControlOverall)) +     geom_bar() ggplot(myData.Predictors, aes(x = OrgControlDetail)) +     geom_bar()
ggplot(myData.Response, aes(x = Domain2_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = Total_HAC_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = PSI_12_POSTOP_PULMEMB_DVT_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = PSI_14_POSTOP_DEHIS_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = PSI_15_ACC_LAC_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = PSI_4_SURG_COMP_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = PSI_6_IAT_PTX_Score)) +     geom_histogram() ggplot(myData.Response, aes(x = PSI_90_SAFETY_Score)) +     geom_histogram()
t.test(myData.Predictors$NofBeds) t.test(myData.Predictors$NofSurgicalOperations) t.test(myData.Predictors$FullTimeEmployees) t.test(myData.Response$Domain2_Score) t.test(myData.Response$Total_HAC_Score) t.test(myData.Response$PSI_12_POSTOP_PULMEMB_DVT_Score) t.test(myData.Response$PSI_14_POSTOP_DEHIS_Score) t.test(myData.Response$PSI_15_ACC_LAC_Score) t.test(myData.Response$PSI_4_SURG_COMP_Score) t.test(myData.Response$PSI_6_IAT_PTX_Score) t.test(myData.Response$PSI_90_SAFETY_Score)
x <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") y <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0")
t.test(x$Domain2_Score, y$Domain2_Score)
t.test(x$Total_HAC_Score, y$Total_HAC_Score)
t.test(x$PSI_12_POSTOP_PULMEMB_DVT_Score, y$PSI_12_POSTOP_PULMEMB_DVT_Score)
t.test(x$PSI_14_POSTOP_DEHIS_Score, y$PSI_14_POSTOP_DEHIS_Score)
t.test(x$PSI_15_ACC_LAC_Score, y$PSI_15_ACC_LAC_Score)
t.test(x$PSI_4_SURG_COMP_Score, y$PSI_4_SURG_COMP_Score)
t.test(x$PSI_6_IAT_PTX_Score, y$PSI_6_IAT_PTX_Score)
t.test(x$PSI_90_SAFETY_Score, y$PSI_90_SAFETY_Score)
x <- subset(x, select = c("OrgControlOverall", "Domain2_Score", "Total_HAC_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_4_SURG_COMP_Score", "PSI_6_IAT_PTX_Score", "PSI_90_SAFETY_Score"))
aov.out <- aov(x$Domain2_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$Total_HAC_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_12_POSTOP_PULMEMB_DVT_Score ~ x$OrgControlOverall) summary(aov.out)
x <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") y <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0")
x <- subset(hospitalData, select = c("OrgControlOverall", "Domain2_Score", "Total_HAC_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_4_SURG_COMP_Score", "PSI_6_IAT_PTX_Score", "PSI_90_SAFETY_Score"))
aov.out <- aov(x$Domain2_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$Total_HAC_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_12_POSTOP_PULMEMB_DVT_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_14_POSTOP_DEHIS_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_15_ACC_LAC_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_4_SURG_COMP_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_6_IAT_PTX_Score ~ x$OrgControlOverall) summary(aov.out)
aov.out <- aov(x$PSI_90_SAFETY_Score ~ x$OrgControlOverall) summary(aov.out)
x <- subset(hospitalData, select = c("OrgControlDetail", "Domain2_Score", "Total_HAC_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_4_SURG_COMP_Score", "PSI_6_IAT_PTX_Score", "PSI_90_SAFETY_Score"))
aov.out <- aov(x$Domain2_Score ~ x$OrgControlDetail ) summary(aov.out)
aov.out <- aov(x$Total_HAC_Score ~ x$OrgControlDetail ) summary(aov.out)
aov.out <- aov(x$PSI_12_POSTOP_PULMEMB_DVT_Score ~ x$OrgControlDetail ) summary(aov.out)
aov.out <- aov(x$PSI_14_POSTOP_DEHIS_Score ~ x$OrgControlDetail ) summary(aov.out)
aov.out <- aov(x$PSI_15_ACC_LAC_Score ~ x$OrgControlDetail ) summary(aov.out)
aov.out <- aov(x$PSI_4_SURG_COMP_Score ~ x$OrgControlDetail ) summary(aov.out)
aov.out <- aov(x$PSI_6_IAT_PTX_Score ~ x$OrgControlDetail ) summary(aov.out)
aov.out <- aov(x$PSI_90_SAFETY_Score ~ x$OrgControlDetail ) summary(aov.out)
x <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") y <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0")
unique(x$OrgControlDetail)
unique(x$OrgControlOverall)
hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.numeric(OrgControlOverall))
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                            ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                            ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                            ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory)
hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall)))
# VIEW (DEBUG) view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) #####END DATA CONSTRUCTION # Summary Output # Vizualiztion ggplot(CommittedRows, aes(x = NofBeds)) +     geom_histogram() # bar chart for beds ggplot(data = hospitalData, aes(x = PlanToReduceErrors, y = NofBeds, fill = OrgControlOverall)) +     geom_bar(stat = "summary", fun.y = "mean", position = position_dodge(), colour = "black") z.test(CommittedRows$NofBeds, y = NonCommittedRows$NofBeds, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) t.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds) # T-Test output
myData.Predictors <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, NofBeds, NofSurgicalOperations, FullTimeEmployees, OrgControlOverall, OrgControlDetail) myData.Response <- hospitalData %>% select(Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) myData.Predictors.Summary <- dfSummary(myData.Predictors, style = "grid") myData.Response.Summary <- dfSummary(myData.Response, style = "grid")
x <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") y <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0")
x.1 <- filter(x, x$OrgControlOverallNum == "1")
y.1 <- filter(y, y$OrgControlOverallNum == "1")
t.test(x.1$Domain2_Score, y.1$Domain2_Score) t.test(x.1$Total_HAC_Score, y.1$Total_HAC_Score) t.test(x.1$PSI_12_POSTOP_PULMEMB_DVT_Score, y.1$PSI_12_POSTOP_PULMEMB_DVT_Score) t.test(x.1$PSI_14_POSTOP_DEHIS_Score, y.1$PSI_14_POSTOP_DEHIS_Score) t.test(x.1$PSI_15_ACC_LAC_Score, y.1$PSI_15_ACC_LAC_Score) t.test(x.1$PSI_4_SURG_COMP_Score, y.1$PSI_4_SURG_COMP_Score) t.test(x.1$PSI_6_IAT_PTx.1_Score, y.1$PSI_6_IAT_PTx.1_Score) t.test(x.1$PSI_90_SAFETy.1_Score, y.1$PSI_90_SAFETy.1_Score)
t.test(x.1$Domain2_Score, y.1$Domain2_Score)
t.test(x.1$Total_HAC_Score, y.1$Total_HAC_Score)
t.test(x.1$PSI_12_POSTOP_PULMEMB_DVT_Score, y.1$PSI_12_POSTOP_PULMEMB_DVT_Score)
t.test(x.1$PSI_14_POSTOP_DEHIS_Score, y.1$PSI_14_POSTOP_DEHIS_Score)
t.test(x.1$PSI_15_ACC_LAC_Score, y.1$PSI_15_ACC_LAC_Score)
t.test(x.1$PSI_4_SURG_COMP_Score, y.1$PSI_4_SURG_COMP_Score)
t.test(x.1$PSI_6_IAT_PTx.1_Score, y.1$PSI_6_IAT_PTx.1_Score)
t.test(x.1$PSI_6_IAT_PTX_Score, y.1$PSI_6_IAT_PTX_Score)
t.test(x.1$PSI_90_SAFETY_Score, y.1$PSI_90_SAFETY_Score)
x.2 <- filter(x, x$OrgControlOverallNum == "2") y.2 <- filter(y, y$OrgControlOverallNum == "2")
t.test(x.2$Domain2_Score, y.2$Domain2_Score) t.test(x.2$Total_HAC_Score, y.2$Total_HAC_Score) t.test(x.2$PSI_12_POSTOP_PULMEMB_DVT_Score, y.2$PSI_12_POSTOP_PULMEMB_DVT_Score) t.test(x.2$PSI_14_POSTOP_DEHIS_Score, y.2$PSI_14_POSTOP_DEHIS_Score) t.test(x.2$PSI_15_ACC_LAC_Score, y.2$PSI_15_ACC_LAC_Score) t.test(x.2$PSI_4_SURG_COMP_Score, y.2$PSI_4_SURG_COMP_Score) t.test(x.2$PSI_6_IAT_PTX_Score, y.2$PSI_6_IAT_PTX_Score) t.test(x.2$PSI_90_SAFETY_Score, y.2$PSI_90_SAFETY_Score)
x.3 <- filter(x, x$OrgControlOverallNum == "3") y.3 <- filter(y, y$OrgControlOverallNum == "3")
t.test(x.3$Domain2_Score, y.3$Domain2_Score) t.test(x.3$Total_HAC_Score, y.3$Total_HAC_Score) t.test(x.3$PSI_12_POSTOP_PULMEMB_DVT_Score, y.3$PSI_12_POSTOP_PULMEMB_DVT_Score) t.test(x.3$PSI_14_POSTOP_DEHIS_Score, y.3$PSI_14_POSTOP_DEHIS_Score) t.test(x.3$PSI_15_ACC_LAC_Score, y.3$PSI_15_ACC_LAC_Score) t.test(x.3$PSI_4_SURG_COMP_Score, y.3$PSI_4_SURG_COMP_Score) t.test(x.3$PSI_6_IAT_PTX_Score, y.3$PSI_6_IAT_PTX_Score) t.test(x.3$PSI_90_SAFETY_Score, y.3$PSI_90_SAFETY_Score)
if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                           ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                           ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                           ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # OrgControlOverallNum hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall))) # VIEW (DEBUG) view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) #####END DATA CONSTRUCTION
descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE)
r3
r3$stats
str(r3$stats)
NonCommittedRows
nrow(NonCommittedRows)
summaryTable.NC
pandoc.table(summaryTable.C, style = "rmarkdown", split.cells = "inf", split.tables = "inf", caption = paste("Hospitals with IS Plan Commitment,", "n = ", as.character(nrow(CommittedRows)), sep = " "))
pandoc.table(summaryTable.C, style = "rmarkdown", split.cells = "inf", split.tables = "inf", caption = paste("Hospitals with IS Plan Commitment,", "n = ", as.character(nrow(CommittedRows)), sep = " "))
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases # hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                           ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                           ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                           ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # OrgControlOverallNum hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall))) # VIEW (DEBUG) # view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) ## histogram of demographics #ggplot(CommittedRows, aes(x = NofBeds)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = NofSurgicalOperations)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = FullTimeEmployees)) +     #geom_histogram() # DEMOGRAPHIC DIFFERENCE IN MEAN TESTS # NofBeds NofBeds.Diff <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds, alternative = "two.sided", mu = 0, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) # NofSurgicalOperations C.NofSurgicalOperations.val <- na.omit(CommittedRows$NofSurgicalOperations) NC.NofSurgicalOperations.val <- na.omit(NonCommittedRows$NofSurgicalOperations) C.NofSurgicalOperations.sd <- sd(CommittedRows$NofSurgicalOperations, na.rm = TRUE) NC.NofSurgicalOperations.sd <- sd(NonCommittedRows$NofSurgicalOperations, na.rm = TRUE) NofSurgicalOperations.Diff <- z.test(C.NofSurgicalOperations.val, NC.NofSurgicalOperations.val, alternative = "two.sided", mu = 0, sigma.x = C.NofSurgicalOperations.sd, sigma.y = NC.NofSurgicalOperations.sd) # FullTimeEmployees C.FullTimeEmployees.val <- na.omit(CommittedRows$FullTimeEmployees) NC.FullTimeEmployees.val <- na.omit(NonCommittedRows$FullTimeEmployees) C.FullTimeEmployees.sd <- sd(CommittedRows$FullTimeEmployees, na.rm = TRUE) NC.FullTimeEmployees.sd <- sd(NonCommittedRows$FullTimeEmployees, na.rm = TRUE) FullTimeEmployees.Diff <- z.test(C.FullTimeEmployees.val, NC.FullTimeEmployees.val, alternative = "two.sided", mu = 0, sigma.x = C.FullTimeEmployees.sd, sigma.y = NC.FullTimeEmployees.sd)
myData.Predictors <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, NofBeds, NofSurgicalOperations, FullTimeEmployees, OrgControlOverall, OrgControlDetail) myData.Response <- hospitalData %>% select(Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) myData.Predictors.Summary <- dfSummary(myData.Predictors, style = "grid") myData.Response.Summary <- dfSummary(myData.Response, style = "grid")
ggplot(myData.Predictors, aes(x = OrgControlOverall)) +     geom_bar()
freq(CommittedRows$OrgControlOverall)
freq(NonCommittedRows$OrgControlOverall)
temp <- freq(NonCommittedRows$OrgControlOverall)
temp
temp <- freq(NonCommittedRows$OrgControlOverall, style = 'rmarkdown')
temp <- freq(NonCommittedRows$OrgControlOverall, style = 'rmarkdown', plain.ascii = TRUE)
temp
attributes(temp)
temp$dimnames
attributes(temp)
attr(temp, "dimnames")
attr(temp, "dimnames[1]")
attr(temp, "dimnames")
attr(temp, "dimnames[[1]]")
attr(temp, "dimnames[1,]")
attr(temp, "dimnames(1)")
attr(temp, "dimnames")
t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score)
t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score)
t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score)
t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "greater")
t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score)
?t.test
t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "greater")
t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "greater")
t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "greater")
t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "greater")
t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "greater")
t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "greater")
t.test(CommittedRows$PSI_6_IAT_PTCommittedRows_Score, NonCommittedRows$PSI_6_IAT_PTCommittedRows_Score, alternative = "greater")
t.test(CommittedRows$PSI_6_IAT_PTCommittedRows_Score, NonCommittedRows$PSI_6_IAT_PTCommittedRows_Score, alternative = "greater")
t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "greater")
t.test(CommittedRows$PSI_6_IAT_PT_Score, NonCommittedRows$PSI_6_IAT_PT_Score, alternative = "greater")
t.test(CommittedRows$PSI_6_IAT_PT_Score, NonCommittedRows$PSI_6_IAT_PT_Score, alternative = "greater")
t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "greater")
t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "greater"))
t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "greater")
t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "greater")
PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "greater"))
t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "greater")
PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "greater") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "greater") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "greater") PSI14.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "greater") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "greater") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "greater") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "greater")
?t.test
PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "less") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "less") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "less") PSI14.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "less") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "less") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "less") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "less")
PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "less") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "less") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "less") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "less") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "less") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "less") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "less")
PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "greater") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "greater") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "greater") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "greater") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "greater") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "greater") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "greater")
PSI14.diff
unique(hospitalData$OrgControlOverallNum)
x <- subset(hospitalData, select = c("OrgControlOverall", "Domain2_Score", "Total_HAC_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_4_SURG_COMP_Score", "PSI_6_IAT_PTX_Score", "PSI_90_SAFETY_Score")) #Domain2_Score aov.out <- aov(x$Domain2_Score ~ x$OrgControlOverall) summary(aov.out) #Total_HAC_Score  aov.out <- aov(x$Total_HAC_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_12_POSTOP_PULMEMB_DVT_Score  aov.out <- aov(x$PSI_12_POSTOP_PULMEMB_DVT_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_14_POSTOP_DEHIS_Score  aov.out <- aov(x$PSI_14_POSTOP_DEHIS_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_15_ACC_LAC_Score  aov.out <- aov(x$PSI_15_ACC_LAC_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_4_SURG_COMP_Score aov.out <- aov(x$PSI_4_SURG_COMP_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_6_IAT_PTX_Score  aov.out <- aov(x$PSI_6_IAT_PTX_Score ~ x$OrgControlOverall) summary(aov.out) #PSI_90_SAFETY_Score  aov.out <- aov(x$PSI_90_SAFETY_Score ~ x$OrgControlOverall) summary(aov.out)
x.1 <- filter(x, x$OrgControlOverallNum == "1") y.1 <- filter(y, y$OrgControlOverallNum == "1")
x <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") y <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0")
x.1 <- filter(x, x$OrgControlOverallNum == "1") y.1 <- filter(y, y$OrgControlOverallNum == "1")
t.test(x.1$Domain2_Score, y.1$Domain2_Score) t.test(x.1$Total_HAC_Score, y.1$Total_HAC_Score) t.test(x.1$PSI_12_POSTOP_PULMEMB_DVT_Score, y.1$PSI_12_POSTOP_PULMEMB_DVT_Score) t.test(x.1$PSI_14_POSTOP_DEHIS_Score, y.1$PSI_14_POSTOP_DEHIS_Score) t.test(x.1$PSI_15_ACC_LAC_Score, y.1$PSI_15_ACC_LAC_Score) t.test(x.1$PSI_4_SURG_COMP_Score, y.1$PSI_4_SURG_COMP_Score) t.test(x.1$PSI_6_IAT_PTX_Score, y.1$PSI_6_IAT_PTX_Score) t.test(x.1$PSI_90_SAFETY_Score, y.1$PSI_90_SAFETY_Score)
x.2 <- filter(x, x$OrgControlOverallNum == "2") y.2 <- filter(y, y$OrgControlOverallNum == "2") t.test(x.2$Domain2_Score, y.2$Domain2_Score) t.test(x.2$Total_HAC_Score, y.2$Total_HAC_Score) t.test(x.2$PSI_12_POSTOP_PULMEMB_DVT_Score, y.2$PSI_12_POSTOP_PULMEMB_DVT_Score) t.test(x.2$PSI_14_POSTOP_DEHIS_Score, y.2$PSI_14_POSTOP_DEHIS_Score) t.test(x.2$PSI_15_ACC_LAC_Score, y.2$PSI_15_ACC_LAC_Score) t.test(x.2$PSI_4_SURG_COMP_Score, y.2$PSI_4_SURG_COMP_Score) t.test(x.2$PSI_6_IAT_PTX_Score, y.2$PSI_6_IAT_PTX_Score) t.test(x.2$PSI_90_SAFETY_Score, y.2$PSI_90_SAFETY_Score)
x.3 <- filter(x, x$OrgControlOverallNum == "3") y.3 <- filter(y, y$OrgControlOverallNum == "3") t.test(x.3$Domain2_Score, y.3$Domain2_Score) t.test(x.3$Total_HAC_Score, y.3$Total_HAC_Score) t.test(x.3$PSI_12_POSTOP_PULMEMB_DVT_Score, y.3$PSI_12_POSTOP_PULMEMB_DVT_Score) t.test(x.3$PSI_14_POSTOP_DEHIS_Score, y.3$PSI_14_POSTOP_DEHIS_Score) t.test(x.3$PSI_15_ACC_LAC_Score, y.3$PSI_15_ACC_LAC_Score) t.test(x.3$PSI_4_SURG_COMP_Score, y.3$PSI_4_SURG_COMP_Score) t.test(x.3$PSI_6_IAT_PTX_Score, y.3$PSI_6_IAT_PTX_Score) t.test(x.3$PSI_90_SAFETY_Score, y.3$PSI_90_SAFETY_Score)
?t.test
PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff <- t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "two-sided") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "two.sided") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "two.sided")
PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff <- t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "two.sided") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "two.sided")
?t.test
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases # hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                           ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                           ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                           ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # OrgControlOverallNum hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall))) # VIEW (DEBUG) # view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) ## histogram of demographics #ggplot(CommittedRows, aes(x = NofBeds)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = NofSurgicalOperations)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = FullTimeEmployees)) +     #geom_histogram() # DEMOGRAPHIC DIFFERENCE IN MEAN TESTS # NofBeds NofBeds.Diff <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds, alternative = "two.sided", mu = 0, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) # NofSurgicalOperations C.NofSurgicalOperations.val <- na.omit(CommittedRows$NofSurgicalOperations) NC.NofSurgicalOperations.val <- na.omit(NonCommittedRows$NofSurgicalOperations) C.NofSurgicalOperations.sd <- sd(CommittedRows$NofSurgicalOperations, na.rm = TRUE) NC.NofSurgicalOperations.sd <- sd(NonCommittedRows$NofSurgicalOperations, na.rm = TRUE) NofSurgicalOperations.Diff <- z.test(C.NofSurgicalOperations.val, NC.NofSurgicalOperations.val, alternative = "two.sided", mu = 0, sigma.x = C.NofSurgicalOperations.sd, sigma.y = NC.NofSurgicalOperations.sd) # FullTimeEmployees C.FullTimeEmployees.val <- na.omit(CommittedRows$FullTimeEmployees) NC.FullTimeEmployees.val <- na.omit(NonCommittedRows$FullTimeEmployees) C.FullTimeEmployees.sd <- sd(CommittedRows$FullTimeEmployees, na.rm = TRUE) NC.FullTimeEmployees.sd <- sd(NonCommittedRows$FullTimeEmployees, na.rm = TRUE) FullTimeEmployees.Diff <- z.test(C.FullTimeEmployees.val, NC.FullTimeEmployees.val, alternative = "two.sided", mu = 0, sigma.x = C.FullTimeEmployees.sd, sigma.y = NC.FullTimeEmployees.sd) # Response variable difference in mean tests PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff <- t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "two.sided") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "two.sided")
Committed.OrgControl1 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "1") NonCommitted.OrgControl1 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "1")
ggplot(Committed.OrgControl1, aes(x = OrgControlDetail)) +     geom_bar()
Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "2") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "2")
ggplot(Committed.OrgControl2, aes(x = OrgControlDetail)) +     geom_bar()
Committed.OrgControl3 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "3") NonCommitted.OrgControl3 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "3")
aov.out <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverall) summary(aov.out)
C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverall) summary(aov.out) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverall) summary(aov.out) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverall) summary(aov.out) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverall) summary(aov.out) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverall) summary(aov.out) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverall) summary(aov.out) C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverall) summary(aov.out) C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverall) summary(aov.out)
C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverall) summary(C.PSI4.aov) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverall) summary(C.PSI6.aov) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverall) summary(C.PSI12.aov) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverall) summary(C.PSI14.aov) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverall) summary(C.PSI15.aov) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverall) summary(C.PSI90.aov) C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverall) summary(C.D2.aov) C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverall) summary(C.HAC.aov)
C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI4.aov) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI6.aov) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI12.aov) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI14.aov) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI15.aov) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI90.aov) C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) summary(C.D2.aov) C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.HAC.aov)
C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) summary(C.D2.aov) C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.HAC.aov)
TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))
TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
ggplot(CommittedRows, aes(x = OrgControlDetail)) +     geom_bar()
ggplot(CommittedRows, aes(x = OrgControlOverall)) +     geom_bar()
TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum), ordered = TRUE)
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum), ordered = TRUE)
plot(C.D2.tukey)
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum), ordered = TRUE)
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum), ordered = TRUE)
# plot(C.D2.tukey)
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum), ordered = TRUE)
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum), ordered = TRUE)
# plot(C.D2.tukey)
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum), ordered = TRUE)
ggplot(CommittedRows, aes(x = OrgControlOverall)) +     geom_bar() # Tukey C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum), ordered = TRUE)
# plot(C.D2.tukey)
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))
# plot(C.D2.tukey)
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
# Tukey C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)) # Tukey C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)) # Tukey C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)) C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
NC.PSI4.aov <- aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI4.aov) NC.PSI6.aov <- aov(NonCommittedRows$PSI_6_IAT_PTX_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI6.aov) NC.PSI12.aov <- aov(NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI12.aov) NC.PSI14.aov <- aov(NonCommittedRows$PSI_14_POSTOP_DEHIS_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI14.aov) NC.PSI15.aov <- aov(NonCommittedRows$PSI_15_ACC_LAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI15.aov) NC.PSI90.aov <- aov(NonCommittedRows$PSI_90_SAFETY_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI90.aov) NC.D2.aov <- aov(NonCommittedRows$Domain2_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.D2.aov) NC.HANC.aov <- aov(NonCommittedRows$Total_HAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.HANC.aov)
NC.PSI4.tukey <- TukeyHSD(aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum))
if (!('nortest' %in% rownames(installed.packages()))) {     install.packages('nortest') }
library(nortest)
ad.test(residuals(C.D2.aov))
?ad.test
ad.test(rnorm(100, mean = 5, sd = 3))
ad.test(residuals(C.HAC.aov))
ad.test(residuals(C.PSI90.aov))
ad.test(residuals(C.HAC.aov))
leveneTest(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)
leveneTest(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)
C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)
ad.test(residuals(C.HAC.aov))
qqPlot(CommittedRows$Total_HAC_Score)
boxplot(CommittedRows$Total_HAC_Score)
qqPlot(CommittedRows$Domain2_Score)
boxplot(CommittedRows$Domain2_Score)
ad.test(residuals(C.D2.aov))
?ad.test
ad.test(CommittedRows$Domain2_Score)
shapiro.test(CommittedRows$Domain2_Score)
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } if (!('nortest' %in% rownames(installed.packages()))) {     install.packages('nortest') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) library(nortest) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases # hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                           ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                           ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                           ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # OrgControlOverallNum hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall))) # VIEW (DEBUG) # view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) ## histogram of demographics #ggplot(CommittedRows, aes(x = NofBeds)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = NofSurgicalOperations)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = FullTimeEmployees)) +     #geom_histogram() # DEMOGRAPHIC DIFFERENCE IN MEAN TESTS # NofBeds NofBeds.Diff <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds, alternative = "two.sided", mu = 0, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) # NofSurgicalOperations C.NofSurgicalOperations.val <- na.omit(CommittedRows$NofSurgicalOperations) NC.NofSurgicalOperations.val <- na.omit(NonCommittedRows$NofSurgicalOperations) C.NofSurgicalOperations.sd <- sd(CommittedRows$NofSurgicalOperations, na.rm = TRUE) NC.NofSurgicalOperations.sd <- sd(NonCommittedRows$NofSurgicalOperations, na.rm = TRUE) NofSurgicalOperations.Diff <- z.test(C.NofSurgicalOperations.val, NC.NofSurgicalOperations.val, alternative = "two.sided", mu = 0, sigma.x = C.NofSurgicalOperations.sd, sigma.y = NC.NofSurgicalOperations.sd) # FullTimeEmployees C.FullTimeEmployees.val <- na.omit(CommittedRows$FullTimeEmployees) NC.FullTimeEmployees.val <- na.omit(NonCommittedRows$FullTimeEmployees) C.FullTimeEmployees.sd <- sd(CommittedRows$FullTimeEmployees, na.rm = TRUE) NC.FullTimeEmployees.sd <- sd(NonCommittedRows$FullTimeEmployees, na.rm = TRUE) FullTimeEmployees.Diff <- z.test(C.FullTimeEmployees.val, NC.FullTimeEmployees.val, alternative = "two.sided", mu = 0, sigma.x = C.FullTimeEmployees.sd, sigma.y = NC.FullTimeEmployees.sd) # Response variable difference in mean tests PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff <- t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "two.sided") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "two.sided") # ANOVA between org control within each group C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI4.aov) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI6.aov) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI12.aov) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI14.aov) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI15.aov) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI90.aov)
ad.test(residuals(C.PSI90.aov))
C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)
summary(C.D2.aov)
qqPlot(CommittedRows$Domain2_Score)
boxplot(CommittedRows$Domain2_Score)
ad.test(CommittedRows$Domain2_Score)
shapiro.test(CommittedRows$Domain2_Score)
leveneTest(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)
C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.HAC.aov)
qqPlot(CommittedRows$Total_HAC_Score)
boxplot(CommittedRows$Total_HAC_Score)
ad.test(residuals(C.HAC.aov))
leveneTest(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)
bartlett.test(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)
library(MASS)
out <- boxcox(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)
lambda <- round(out$x[which.max(out$y)], 1)
lambda
CommittedRows <- mutate(CommittedRows, Domain2_Score = Domain2_Score ^ lambda)
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } if (!('nortest' %in% rownames(installed.packages()))) {     install.packages('nortest') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) library(nortest) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases # hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                           ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                           ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                           ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # OrgControlOverallNum hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall))) # VIEW (DEBUG) # view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) ## histogram of demographics #ggplot(CommittedRows, aes(x = NofBeds)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = NofSurgicalOperations)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = FullTimeEmployees)) +     #geom_histogram() # DEMOGRAPHIC DIFFERENCE IN MEAN TESTS # NofBeds NofBeds.Diff <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds, alternative = "two.sided", mu = 0, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) # NofSurgicalOperations C.NofSurgicalOperations.val <- na.omit(CommittedRows$NofSurgicalOperations) NC.NofSurgicalOperations.val <- na.omit(NonCommittedRows$NofSurgicalOperations) C.NofSurgicalOperations.sd <- sd(CommittedRows$NofSurgicalOperations, na.rm = TRUE) NC.NofSurgicalOperations.sd <- sd(NonCommittedRows$NofSurgicalOperations, na.rm = TRUE) NofSurgicalOperations.Diff <- z.test(C.NofSurgicalOperations.val, NC.NofSurgicalOperations.val, alternative = "two.sided", mu = 0, sigma.x = C.NofSurgicalOperations.sd, sigma.y = NC.NofSurgicalOperations.sd) # FullTimeEmployees C.FullTimeEmployees.val <- na.omit(CommittedRows$FullTimeEmployees) NC.FullTimeEmployees.val <- na.omit(NonCommittedRows$FullTimeEmployees) C.FullTimeEmployees.sd <- sd(CommittedRows$FullTimeEmployees, na.rm = TRUE) NC.FullTimeEmployees.sd <- sd(NonCommittedRows$FullTimeEmployees, na.rm = TRUE) FullTimeEmployees.Diff <- z.test(C.FullTimeEmployees.val, NC.FullTimeEmployees.val, alternative = "two.sided", mu = 0, sigma.x = C.FullTimeEmployees.sd, sigma.y = NC.FullTimeEmployees.sd) # Response variable difference in mean tests PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff <- t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "two.sided") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "two.sided") # ANOVA between org control within each group C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI4.aov) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI6.aov) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI12.aov) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI14.aov) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI15.aov) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI90.aov) C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) summary(C.D2.aov) # check for normality #qqPlot(CommittedRows$Domain2_Score) #boxplot(CommittedRows$Domain2_Score) ad.test(CommittedRows$Domain2_Score) # check for equality of variances leveneTest(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) library(MASS) out <- boxcox(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) lambda <- round(out$x[which.max(out$y)], 1) lambda # transform data - create new column yt using boxcox lambda CommittedRows <- mutate(CommittedRows, Domain2_Score_T = Domain2_Score ^ lambda)
CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score_T.avg = mean(Domain2_Score_T), Domain2_Score_T.sd = sd(Domain2_Score_T))
CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score_T.avg = mean(Domain2_Score_T, na.rm = TRUE), Domain2_Score_T.sd = sd(Domain2_Score_T, na.rm = TRUE))
C.D2_T.aov <- aov(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum)
ad.test(residuals(C.D2_T.aov))
summary(C.D2_T.aov)
ad.test(residuals(C.D2.aov))
summary(C.D2.aov)
CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score_T.avg = mean(Domain2_Score_T, na.rm = TRUE), Domain2_Score_T.sd = sd(Domain2_Score_T, na.rm = TRUE)) CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score.avg = mean(Domain2_Score, na.rm = TRUE), Domain2_Score.sd = sd(Domain2_Score, na.rm = TRUE))
boxcox(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)
out
round(out$x[which.max(out$y)], 1)
which.max(out$y)
CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score_T.avg = mean(Domain2_Score_T, na.rm = TRUE), Domain2_Score_T.sd = sd(Domain2_Score_T, na.rm = TRUE)) CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score.avg = mean(Domain2_Score, na.rm = TRUE), Domain2_Score.sd = sd(Domain2_Score, na.rm = TRUE))
C.D2_T.aov <- aov(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum)
summary(C.D2_T.aov)
leveneTest(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum)
bartlett.test(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum)
summary(C.D2_T.aov)
ggplot(CommittedRows, aes(x = Domain2_Score)) + geom_histogram()
ggplot(CommittedRows, aes(x = trim(Domain2_Score, .1))) + geom_histogram()
ggplot(CommittedRows, aes(x = Domain2_Score)) + geom_histogram()
ggplot(CommittedRows, aes(x = log(Domain2_Score))) + geom_histogram()
ggplot(CommittedRows, aes(x = Domain2_Score)) + geom_histogram()
ggplot(CommittedRows, aes(x = sqrt(Domain2_Score))) + geom_histogram()
ggplot(CommittedRows, aes(x = log(Domain2_Score+1))) + geom_histogram()
ggplot(CommittedRows, aes(x = log(Total_HAC_Score)) + geom_histogram() ggplot(CommittedRows, aes(x = Total_HAC_Score) + geom_histogram() ggplot(CommittedRows, aes(x = Total_HAC_Score) + geom_histogram())
ggplot(CommittedRows, aes(x = Total_HAC_Score)) + geom_histogram()
ggplot(NonCommittedRows, aes(x = PSI_4_SURG_COMP_Score)) + geom_histogram()
C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI4.aov) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI6.aov) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI12.aov) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI14.aov) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI15.aov) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI90.aov)
C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) summary(C.D2.aov) C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.HAC.aov)
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)) C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
plot(C.D2.aov)
plot(C.D2.aov)
C.D2.aov
summary(C.D2.aov)> summary(C.D2.aov)
summary(C.D2.aov)
C.D2.aov
NC.PSI4.aov <- aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI4.aov) NC.PSI6.aov <- aov(NonCommittedRows$PSI_6_IAT_PTX_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI6.aov) NC.PSI12.aov <- aov(NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI12.aov) NC.PSI14.aov <- aov(NonCommittedRows$PSI_14_POSTOP_DEHIS_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI14.aov) NC.PSI15.aov <- aov(NonCommittedRows$PSI_15_ACC_LAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI15.aov) NC.PSI90.aov <- aov(NonCommittedRows$PSI_90_SAFETY_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI90.aov) NC.D2.aov <- aov(NonCommittedRows$Domain2_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.D2.aov) NC.HANC.aov <- aov(NonCommittedRows$Total_HAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.HANC.aov)
summary(NC.PSI4.aov)
NC.PSI4.tukey <- TukeyHSD(aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum))
CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(n = n())
CommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n())
temp <- CommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n())
temp
pandoc.table(temp)
temp
CommittedRows %>% group_by(IsCommittedOrgControlOverall) %>% summarise(n = n())
temp <- CommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n())
temp
attributes(temp)
temp[1]
temp[1](1,)
temp[1,2]
temp[1,1]
C.OrgControlCount <- CommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) NC.OrgControlCount <- NonCommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n())
NC.OrgControlCount[1,1]
NC.OrgControlCount[1,2]
NC.OrgControlCount[2,2]
summary(C.PSI4.aov)
summary(C.PSI6.aov)
summary(C.PSI15.aov)
summary(C.D2.aov)
summary(C.HAC.aov)
summary(C.D2.aov)
summary(C.D2.aov)[1,6]
temp <- summary(C.D2.aov)
temp
temp[1,6]
temp[1,5]
temp[1]
C.HAC.aov
summary(C.HAC.aov)
summary(C.HAC.aov)
summary(C.HAC.aov)
round(summary(C.HAC.aov)[[1]][["Pr(>F)"]][[1]], 4)
round(summary(C.D2.aov)[[1]][["Pr(>F)"]][[1]], 4)
SUMMARY(C.D2.aov)
summary(C.D2.aov)
round(summary(C.HAC.aov)[[1]][["Pr(>F)"]][[1]], 4)
round(summary(C.D2.aov)[[1]][["Pr(>F)"]][[1]], 4)
round(summary(C.D2.aov)[[1]][["Pr(>F)"]][[1]], 6)
round(summary(C.D2.aov)[[1]][["Pr(>F)"]][[1]], 5)
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))round(summary(C.D2.aov)[[1]][["Pr(>F)"]][[1]], 5)
C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum))
plot(C.D2.aov)
C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum))
Committed.OrgControl1 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "1") NonCommitted.OrgControl1 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "1") Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "2") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "2") Committed.OrgControl3 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "3") NonCommitted.OrgControl3 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "3")
t.test(Committed.OrgControl1$Domain2_Score, Committed.OrgControl1$Domain2_Score)
t.test(Committed.OrgControl1$Domain2_Score, Committed.OrgControl2$Domain2_Score)
?t.test
t.test(Committed.OrgControl1$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative="greater")
t.test(Committed.OrgControl1$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative="less")
t.test(Committed.OrgContro3$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative="less")> t.test(Committed.OrgContro3$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative="less")
t.test(Committed.OrgControl3$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative="less")> t.test(Committed.OrgContro3$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative="less")
t.test(Committed.OrgControl3$Domain2_Score, Committed.OrgControl2$Domain2_Score, altern 	  )
t.test(Committed.OrgControl3$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative="less")
t.test(Committed.OrgControl3$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative="greater")
NC.PSI4.tukey <- TukeyHSD(aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum))
summary(NC.PSI4.aov)
round(summary(NC.PSI.aov)[[1]][["Pr(>F)"]][[1]], 4)
#ggplot(NonCommittedRows, aes(x = PSI_4_SURG_COMP_Score)) + #geom_histogram() NC.PSI4.aov <- aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI4.aov) NC.PSI6.aov <- aov(NonCommittedRows$PSI_6_IAT_PTX_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI6.aov) NC.PSI12.aov <- aov(NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI12.aov) NC.PSI14.aov <- aov(NonCommittedRows$PSI_14_POSTOP_DEHIS_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI14.aov) NC.PSI15.aov <- aov(NonCommittedRows$PSI_15_ACC_LAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI15.aov) NC.PSI90.aov <- aov(NonCommittedRows$PSI_90_SAFETY_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI90.aov) NC.D2.aov <- aov(NonCommittedRows$Domain2_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.D2.aov) NC.HANC.aov <- aov(NonCommittedRows$Total_HAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.HANC.aov) NC.PSI4.tukey <- TukeyHSD(aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum))
round(summary(NC.PSI4.aov)[[1]][["Pr(>F)"]][[1]], 4)
t.test(Committed.OrgControl1$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative="less")
t.test(Committed.OrgControl1$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative="greater")
t.test(NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "less")
t.test(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "less")
t.test(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "greater")
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } if (!('nortest' %in% rownames(installed.packages()))) {     install.packages('nortest') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) library(nortest) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) # Filter data to only complete cases # hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                           ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                           ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                           ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # OrgControlOverallNum hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall))) # VIEW (DEBUG) # view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) C.OrgControlCount <- CommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) NC.OrgControlCount <- NonCommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) ## histogram of demographics #ggplot(CommittedRows, aes(x = NofBeds)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = NofSurgicalOperations)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = FullTimeEmployees)) +     #geom_histogram() # DEMOGRAPHIC DIFFERENCE IN MEAN TESTS # NofBeds NofBeds.Diff <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds, alternative = "two.sided", mu = 0, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) # NofSurgicalOperations C.NofSurgicalOperations.val <- na.omit(CommittedRows$NofSurgicalOperations) NC.NofSurgicalOperations.val <- na.omit(NonCommittedRows$NofSurgicalOperations) C.NofSurgicalOperations.sd <- sd(CommittedRows$NofSurgicalOperations, na.rm = TRUE) NC.NofSurgicalOperations.sd <- sd(NonCommittedRows$NofSurgicalOperations, na.rm = TRUE) NofSurgicalOperations.Diff <- z.test(C.NofSurgicalOperations.val, NC.NofSurgicalOperations.val, alternative = "two.sided", mu = 0, sigma.x = C.NofSurgicalOperations.sd, sigma.y = NC.NofSurgicalOperations.sd) # FullTimeEmployees C.FullTimeEmployees.val <- na.omit(CommittedRows$FullTimeEmployees) NC.FullTimeEmployees.val <- na.omit(NonCommittedRows$FullTimeEmployees) C.FullTimeEmployees.sd <- sd(CommittedRows$FullTimeEmployees, na.rm = TRUE) NC.FullTimeEmployees.sd <- sd(NonCommittedRows$FullTimeEmployees, na.rm = TRUE) FullTimeEmployees.Diff <- z.test(C.FullTimeEmployees.val, NC.FullTimeEmployees.val, alternative = "two.sided", mu = 0, sigma.x = C.FullTimeEmployees.sd, sigma.y = NC.FullTimeEmployees.sd) # Response variable difference in mean tests PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff <- t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "two.sided") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "two.sided") # ANOVA between org control within each group C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI4.aov) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI6.aov) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI12.aov) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI14.aov) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI15.aov) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI90.aov) # ANOVA results C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) summary(C.D2.aov) C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.HAC.aov) # Tukey results C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)) C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)) # ANOVA results NC.PSI4.aov <- aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI4.aov) # Tukey results NC.PSI4.tukey <- TukeyHSD(aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum)) NC.PSI6.aov <- aov(NonCommittedRows$PSI_6_IAT_PTX_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI6.aov) NC.PSI12.aov <- aov(NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI12.aov) NC.PSI14.aov <- aov(NonCommittedRows$PSI_14_POSTOP_DEHIS_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI14.aov) NC.PSI15.aov <- aov(NonCommittedRows$PSI_15_ACC_LAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI15.aov) NC.PSI90.aov <- aov(NonCommittedRows$PSI_90_SAFETY_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI90.aov) NC.D2.aov <- aov(NonCommittedRows$Domain2_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.D2.aov) NC.HANC.aov <- aov(NonCommittedRows$Total_HAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.HANC.aov)
pandoc.table(summaryTable.C, style = "rmarkdown", split.cells = "inf", split.tables = "inf", caption = paste("Hospitals *with* IT Plan Commitment,", "n = ", as.character(nrow(CommittedRows)), sep = " "))
Committed.OrgControl1 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "1") NonCommitted.OrgControl1 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "1") Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "2") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "2") Committed.OrgControl3 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "3") NonCommitted.OrgControl3 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "3")
Committed.OrgControl1 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "1") NonCommitted.OrgControl1 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "1") Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "2") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "2") Committed.OrgControl3 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "3") NonCommitted.OrgControl3 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "3")
PSI4.diff.org1 <- t.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided")
PSI4.diff.org1
PSI6.diff.org1 <- t.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- t.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- t.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- t.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- t.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- t.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- t.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided")
PSI4.diff.org1 <- t.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org1 <- t.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- t.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- t.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- t.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- t.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- t.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- t.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided")
PSI4.diff.org1
PSI6.diff.org1
PSI12.diff.org1
PSI14.diff.org1
PSI15.diff.org1
PSI90.diff.org1
D2.diff.org1
PSI4.diff.org1
PSI4.diff.org2 <- t.test(Committed.Orgcontrol2$PSI_4_SURG_COMP_Score, NonCommitted.Orgcontrol2$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org2 <- t.test(Committed.Orgcontrol2$PSI_6_IAT_PTX_Score, NonCommitted.Orgcontrol2$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org2 <- t.test(Committed.Orgcontrol2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.Orgcontrol2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org2 <- t.test(Committed.Orgcontrol2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.Orgcontrol2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org2 <- t.test(Committed.Orgcontrol2$PSI_15_ACC_LAC_Score, NonCommitted.Orgcontrol2$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org2 <- t.test(Committed.Orgcontrol2$PSI_90_SAFETY_Score, NonCommitted.Orgcontrol2$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org2 <- t.test(Committed.Orgcontrol2$Domain2_Score, NonCommitted.Orgcontrol2$Domain2_Score, alternative = "two.sided") HAC.diff.org2 <- t.test(Committed.Orgcontrol2$Total_HAC_Score, NonCommitted.Orgcontrol2$Total_HAC_Score, alternative = "two.sided")
PSI4.diff.org2 <- t.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org2 <- t.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org2 <- t.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org2 <- t.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org2 <- t.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org2 <- t.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org2 <- t.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") HAC.diff.org2 <- t.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided")
PSI4.diff.org2 # DIFFERENCE
PSI6.diff.org2
PSI12.diff.org2
PSI14.diff.org2
PSI15.diff.org2
PSI90.diff.org2
D2.diff.org2
D2.diff.org2
HAC.diff.org2 # DIFFERENCE
PSI6.diff.org2
PSI14.diff.org2
PSI90.diff.org2
HAC.diff.org2 
PSI4.diff.org2 # DIFFERENCE
PSI6.diff.org2
PSI12.diff.org2
PSI12.diff.org2
attributes(PSI14.diff.org1)
PSI4.diff.org1 <- t.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org1 <- t.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- t.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- t.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- t.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- t.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- t.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- t.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org1  # DIFFERENCE PSI6.diff.org1 PSI12.diff.org1 PSI14.diff.org1 PSI15.diff.org1 PSI90.diff.org1 D2.diff.org1 HAC.diff.org1
PSI4.diff.org2 <- t.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org2 <- t.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org2 <- t.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org2 <- t.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org2 <- t.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org2 <- t.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org2 <- t.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") HAC.diff.org2 <- t.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org2 PSI6.diff.org2 PSI12.diff.org2 # DIFFERENCE PSI14.diff.org2 PSI15.diff.org2 PSI90.diff.org2 D2.diff.org2 # DIFFERENCE HAC.diff.org2
PSI6.diff.org2
PSI4.diff.org3 <- t.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org3 <- t.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org3 <- t.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org3 <- t.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org3 <- t.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org3 <- t.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org3 <- t.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") HAC.diff.org3 <- t.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org3 # DIFFERENCE PSI6.diff.org3 PSI12.diff.org3 PSI14.diff.org3 PSI15.diff.org3 PSI90.diff.org3 D2.diff.org3 HAC.diff.org3
measure.names <- c("PSI_4_SURG_COMP_Score", "PSI_4_SURG_COMP_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_90_SAFETY_Score", "Domain2_Score", "Total_HAC_Score")
measure.names
as.list(measure.names)
measure.names(t)
t(measure.names)
sum(measure.names)
as.data.frame(measure.names)
?data.frame
measure.names <- data.frame(x = c("PSI_4_SURG_COMP_Score", "PSI_4_SURG_COMP_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_90_SAFETY_Score", "Domain2_Score", "Total_HAC_Score"), y = 1:8)
measure.names
measure.names <- data.frame(Measure = c("PSI_4_SURG_COMP_Score", "PSI_4_SURG_COMP_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_90_SAFETY_Score", "Domain2_Score", "Total_HAC_Score"), y = 1:8)
measure.names
measure.names <- data.frame(Code = c("PSI4", "PSI6", "PSI12", "PSI14", "PSI15", "PSI90", "Domain2", "HAC"), Measure = c("PSI_4_SURG_COMP_Score", "PSI_4_SURG_COMP_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_90_SAFETY_Score", "Domain2_Score", "Total_HAC_Score"))
measure.names
measure.names <- data.frame(Code = c("PSI4", "PSI6", "PSI12", "PSI14", "PSI15", "PSI90", "Domain2", "HAC"), Measure = c("PSI_4_SURG_COMP_Score", "PSI_4_SURG_COMP_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_90_SAFETY_Score", "Domain2_Score", "Total_HAC_Score"), row.names = 1)
measure.names
measure.names <- data.frame(Code = c("PSI4", "PSI6", "PSI12", "PSI14", "PSI15", "PSI90", "D2", "HAC"), Measure = c("PSI_4_SURG_COMP_Score", "PSI_4_SURG_COMP_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_90_SAFETY_Score", "Domain2_Score", "Total_HAC_Score"), row.names = 1)
measure.names
PSI4.diff.org1
PSI6.diff.org1
PSI6.diff.org1
PSI6.diff.org2
PSI6.diff.org3
PSI4.diff.org1
ggplot(hospitalData, aes(x = OrgControlOverall)) +     geom_bar()
    geom_bar()
ggplot(hospitalData, aes(x = OrgControlOverallNum)) +     geom_bar()
OrgControlOverallNames <- unique(hospitalData$OrgControlOverall)
OrgControlOverallNames
OrgControlOverallNames[1]
measure.names
measure.names[1,1]
attributes(measure.names)
attr(measure.names, "row.names")
attr(measure.names, "row.names")
names(measure.names)
row.names(measure.names)
row.names(measure.names, "PSI4")
row.names(measure.names)
row.names(measure.names)[1]
groupTable <- data.frame(OwnershipType <- OrgControlOverallNames[1], Code <- row.names(measure.names)[1])
groupTable
groupTable <- data.frame(OwnershipType = OrgControlOverallNames[1], Code = row.names(measure.names)[1])
groupTable
PSI14.diff.org1
PSI4.diff.org1
PSI4.diff.org1$estimate
PSI4.diff.org1$estimate[1]
PSI4.diff.org1$statistic
PSI4.diff.org1$p.value
groupTableHeaders <- c("Ownership Type", "Code", "C($\mu$)", "C(sd)", "NC($\mu$)", "NC(sd)", "t", "p")
groupTableHeaders <- c("Ownership Type", "Code", "C(mean)", "C(sd)", "NC(mean)", "NC(sd)", "t", "p")
groupTableHeaders
groupTable <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2))
groupTable
groupTable <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), round(PSI4.diff.org1$p.value, 4))
groupTable
colnames(groupTable) <- groupTableHeaders
groupTable
pandoc.table(groupTable, style = "rmarkdown")
groupTable <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), round(PSI4.diff.org1$p.value, 6)) colnames(groupTable) <- groupTableHeaders
pandoc.table(groupTable, style = "rmarkdown")groupTable <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), round(PSI4.diff.org1$p.value, 6)) colnames(groupTable) <- groupTableHeaders pandoc.table(groupTable, style = "rmarkdown")
PSI4.diff.org1$p.value
as.character(PSI4.diff.org1$p.value)
as.character(round(PSI4.diff.org1$p.value, 10))
groupTable <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) colnames(groupTable) <- groupTableHeaders pandoc.table(groupTable, style = "rmarkdown")
groupTable
groupTable <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10)))
groupTable
attributes(groupTable)
groupTable <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) colnames(groupTable) <- groupTableHeaders pandoc.table(groupTable, style = "rmarkdown")
?data.frame
groupTable <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10)), row.names = 1) colnames(groupTable) <- groupTableHeaders pandoc.table(groupTable, style = "rmarkdown")
groupTable <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders pandoc.table(groupTable, style = "rmarkdown")
pandoc.table(groupTable, style = "rmarkdown", split.cells = "inf", split.tables = "inf")
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "NC(mean)", "NC(sd)", "t", "p") groupTable <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders pandoc.table(groupTable, style = "rmarkdown", split.cells = "inf", split.tables = "inf")
r2 <- data.frame(OrgControlOverallNames[2], row.names(measure.names)[3], round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 10)))
r2
r2 <- data.frame(OrgControlOverallNames[2], row.names(measure.names)[3], round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 10)))
groupTable = rbind(r1, r2)
r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r2 <- data.frame(OrgControlOverallNames[2], row.names(measure.names)[3], round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 10))) groupTable = rbind(r1, r2)
r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[2], row.names(measure.names)[3], round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 10))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders groupTable = rbind(r1, r2)
rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
groupTable
PSI12.diff.org2
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "NC($\\mu$)", "NC(sd)", "t", "p") r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[2], row.names(measure.names)[3], round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 2))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders groupTable = rbind(r1, r2) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
groupTable
PSI12.diff.org2
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "NC($\\mu$)", "NC(sd)", "t", "p") r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[2], row.names(measure.names)[3], round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame(OrgControlOverallNames[2], row.names(measure.names)[7], round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "NC($\\mu$)", "NC(sd)", "t", "p") r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[2], row.names(measure.names)[3], round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame(OrgControlOverallNames[2], row.names(measure.names)[7], round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
groupTable
r3 <- data.frame("", row.names(measure.names)[7], round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3)))
rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
groupTable
PSI4.diff.org3 PSI6.diff.org3 PSI12.diff.org3 PSI14.diff.org3 PSI15.diff.org3 PSI90.diff.org3 D2.diff.org3 HAC.diff.org3
measure.names
nrow(Committed.OrgControl1)
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "t", "p") r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), ound(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeadersnrow(Committed.OrgControl1)
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "t", "p") r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10)))
r1
rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders
r1
groupTable <- r1
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "t", "p") r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[2], row.names(measure.names)[3], round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame("", row.names(measure.names)[7], round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
OrgControlOverallNames
OrgControlOverallNames[2]
OrgControlOverallNames[3]
Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "1") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "1") Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "2") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "2") Committed.OrgControl3 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "3") NonCommitted.OrgControl3 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "3")
OrgControlOverallNames
unique(hospitalData$OrgControlOverall)
OrgControlOverallNames <- unique(hospitalData$OrgControlOverall)
C.OrgControlCount[1, 1]
NC.OrgControlCount[1, 1]
C.OrgControlCount[2, 1]
C.OrgControlCount
paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1))
paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), sep = "/")
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "t", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame("", row.names(measure.names)[7], round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders #groupTable = rbind(r1, r2, r3) groupTable <= r1 rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "t", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame("", row.names(measure.names)[7], round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders #groupTable = rbind(r1, r2, r3) groupTable <= r1
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p")
groupTableheaders
groupTableHeaders
r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders
r1
groupTable <- r1
groupTable
rownames(groupTable) <- 1:nrow(groupTable)
colnames(groupTable) <- groupTableHeaders
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "t", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders #r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) #rownames(r2) <- 1:nrow(r2) #colnames(r2) <- groupTableHeaders #r3 <- data.frame("", row.names(measure.names)[7], round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) #rownames(r3) <- 1:nrow(r3) #colnames(r3) <- groupTableHeaders #groupTable = rbind(r1, r2, r3) groupTable <= r1 rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "t", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders
groupTable <= r1
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "t", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders #r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) #rownames(r2) <- 1:nrow(r2) #colnames(r2) <- groupTableHeaders #r3 <- data.frame("", row.names(measure.names)[7], round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) #rownames(r3) <- 1:nrow(r3) #colnames(r3) <- groupTableHeaders #groupTable = rbind(r1, r2, r3) groupTable <- r1 rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "t", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame("", row.names(measure.names)[7], paste(round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), sep = "/"), paste(round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
groupTable
PSI4.diff.org1  # DIFFERENCE
PSI12.diff.org2 # DIFFERENCE
D2.diff.org2 # DIFFERENCE
var.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score)
wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score)
PSI4.diff.org1  # DIFFERENCE
boxplot(Committed.OrgControl1$PSI_4_SURG_COMP_Score)
boxplot(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score)
ggplot(Committed.OrgControl1, aes(x = PSI_4_SURG_COMP_Score)) +     geom_bar()
Committed.OrgControl1$PSI_4_SURG_COMP_Score
na.exclude(Committed.OrgControl1$PSI_4_SURG_COMP_Score)
na.omit(Committed.OrgControl1$PSI_4_SURG_COMP_Score)
nrow(Committed.OrgControl1$PSI_4_SURG_COMP_Score)
filter(!is.na(Committed.OrgControl1$PSI_4_SURG_COMP_Score))
filter(Committed.OrgControl1[1])
wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score)
wilcox.test(hospitalData$PSI_4_SURG_COMP_Score ~ hospitalData$ISPlanCommittedToReduceMedicalErrors)
PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided")
PSI4.diff
rowSums(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE)
colSums(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE)
rowSums(Committed.OrgControl1[,22], na.rm = TRUE)
Committed.OrgControl1[,22]
!is.na(Committed.OrgControl1[,22])
sum(!is.na(Committed.OrgControl1[,22]))
sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"]) )
sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"]))
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "t", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame("", row.names(measure.names)[7], paste(round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl2), sep = "/"), paste(round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl2), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "t", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame("", row.names(measure.names)[7], paste(round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"]))
sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"]))
paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10)))
r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/")
r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/")), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10)))
paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/")
paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/")
r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10)))
r1
r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) )
r2
r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/", paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) )
r2
r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3)))
r2
r3 <- data.frame("", row.names(measure.names)[7], paste(round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3)))
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "t", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame("", row.names(measure.names)[7], paste(round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
PSI4.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided")
PSI4.diff.org1
?wilcox.test
wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, al)
PSI4.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- wilcox.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- wilcox.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided")
PSI4.diff.org1  # DIFFERENCE
PSI6.diff.org1
PSI12.diff.org1
PSI14.diff.org1
PSI15.diff.org1
PSI90.diff.org1
D2.diff.org1
HAC.diff.org1
PSI4.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org2 <- wilcox.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") HAC.diff.org2 <- wilcox.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided")
PSI4.diff.org2
PSI6.diff.org2
PSI12.diff.org2 # DIFFERENCE
PSI14.diff.org2
PSI15.diff.org2
PSI90.diff.org2
D2.diff.org2 # DIFFERENCE
HAC.diff.org2
PSI4.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org3 <- wilcox.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") HAC.diff.org3 <- wilcox.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided")
PSI4.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org3 <- wilcox.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") HAC.diff.org3 <- wilcox.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided")
PSI4.diff.org3
PSI6.diff.org3
PSI12.diff.org3
PSI14.diff.org3
PSI15.diff.org3
PSI90.diff.org3
D2.diff.org3
HAC.diff.org3
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "W", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders #r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) #rownames(r2) <- 1:nrow(r2) #colnames(r2) <- groupTableHeaders r3 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[7], paste(round(D2.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(D2.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders # groupTable = rbind(r1, r2, r3) groupTable = rbind(r1, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
round(PSI4.diff.org1$estimate[1], 2)
PSI4.diff.org3
ggplot(Committed.OrgControl1, aes(x = PSI_4_SURG_COMP_Score)) +     geom_bar()
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } if (!('nortest' %in% rownames(installed.packages()))) {     install.packages('nortest') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) library(nortest) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) measure.names <- data.frame(Code = c("PSI4", "PSI6", "PSI12", "PSI14", "PSI15", "PSI90", "D2", "HAC"), Measure = c("PSI_4_SURG_COMP_Score", "PSI_4_SURG_COMP_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_90_SAFETY_Score", "Domain2_Score", "Total_HAC_Score"), row.names = 1) # Filter data to only complete cases # hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                           ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                           ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                           ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # OrgControlOverallNum hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall))) OrgControlOverallNames <- unique(hospitalData$OrgControlOverall) # VIEW (DEBUG) # view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) C.OrgControlCount <- CommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) NC.OrgControlCount <- NonCommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) ## histogram of demographics #ggplot(CommittedRows, aes(x = NofBeds)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = NofSurgicalOperations)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = FullTimeEmployees)) +     #geom_histogram() # DEMOGRAPHIC DIFFERENCE IN MEAN TESTS # NofBeds NofBeds.Diff <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds, alternative = "two.sided", mu = 0, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) # NofSurgicalOperations C.NofSurgicalOperations.val <- na.omit(CommittedRows$NofSurgicalOperations) NC.NofSurgicalOperations.val <- na.omit(NonCommittedRows$NofSurgicalOperations) C.NofSurgicalOperations.sd <- sd(CommittedRows$NofSurgicalOperations, na.rm = TRUE) NC.NofSurgicalOperations.sd <- sd(NonCommittedRows$NofSurgicalOperations, na.rm = TRUE) NofSurgicalOperations.Diff <- z.test(C.NofSurgicalOperations.val, NC.NofSurgicalOperations.val, alternative = "two.sided", mu = 0, sigma.x = C.NofSurgicalOperations.sd, sigma.y = NC.NofSurgicalOperations.sd) # FullTimeEmployees C.FullTimeEmployees.val <- na.omit(CommittedRows$FullTimeEmployees) NC.FullTimeEmployees.val <- na.omit(NonCommittedRows$FullTimeEmployees) C.FullTimeEmployees.sd <- sd(CommittedRows$FullTimeEmployees, na.rm = TRUE) NC.FullTimeEmployees.sd <- sd(NonCommittedRows$FullTimeEmployees, na.rm = TRUE) FullTimeEmployees.Diff <- z.test(C.FullTimeEmployees.val, NC.FullTimeEmployees.val, alternative = "two.sided", mu = 0, sigma.x = C.FullTimeEmployees.sd, sigma.y = NC.FullTimeEmployees.sd) # Response variable difference in mean tests PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff <- t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "two.sided") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "two.sided") # ANOVA between org control within each group C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI4.aov) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI6.aov) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI12.aov) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI14.aov) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI15.aov) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI90.aov) # ANOVA results C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) summary(C.D2.aov) C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.HAC.aov) # Tukey results C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)) C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)) # ANOVA results NC.PSI4.aov <- aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI4.aov) # Tukey results NC.PSI4.tukey <- TukeyHSD(aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum)) NC.PSI6.aov <- aov(NonCommittedRows$PSI_6_IAT_PTX_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI6.aov) NC.PSI12.aov <- aov(NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI12.aov) NC.PSI14.aov <- aov(NonCommittedRows$PSI_14_POSTOP_DEHIS_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI14.aov) NC.PSI15.aov <- aov(NonCommittedRows$PSI_15_ACC_LAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI15.aov) NC.PSI90.aov <- aov(NonCommittedRows$PSI_90_SAFETY_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI90.aov) NC.D2.aov <- aov(NonCommittedRows$Domain2_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.D2.aov) NC.HANC.aov <- aov(NonCommittedRows$Total_HAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.HANC.aov) #TUKEY RESULT SPECIFIC ANALYSIS (NOT SURE IF THIS IS VALID! THESE COMMANDS ARE MISSING SOME COMPARISONS) t.test(NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "greater") t.test(Committed.OrgControl2$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative = "greater") # split data among ownership types within committed vs non-committed Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "1") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "1") Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "2") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "2") Committed.OrgControl3 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "3") NonCommitted.OrgControl3 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "3") #t-tests #PSI4.diff.org1 <- t.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org1 <- t.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org1 <- t.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org1 <- t.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org1 <- t.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org1 <- t.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org1 <- t.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") #HAC.diff.org1 <- t.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") #Wilcox PSI4.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- wilcox.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- wilcox.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org1  # DIFFERENCE PSI6.diff.org1 PSI12.diff.org1 PSI14.diff.org1 PSI15.diff.org1 PSI90.diff.org1 D2.diff.org1 HAC.diff.org1 #PSI4.diff.org2 <- t.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org2 <- t.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org2 <- t.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org2 <- t.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org2 <- t.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org2 <- t.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org2 <- t.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #HAC.diff.org2 <- t.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org2 <- wilcox.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") HAC.diff.org2 <- wilcox.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org2 PSI6.diff.org2 PSI12.diff.org2 # DIFFERENCE PSI14.diff.org2 PSI15.diff.org2 PSI90.diff.org2 D2.diff.org2 # DIFFERENCE HAC.diff.org2 #PSI4.diff.org3 <- t.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org3 <- t.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org3 <- t.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org3 <- t.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org3 <- t.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org3 <- t.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org3 <- t.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") #HAC.diff.org3 <- t.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org3 <- wilcox.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") HAC.diff.org3 <- wilcox.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org3 PSI6.diff.org3 PSI12.diff.org3 PSI14.diff.org3 PSI15.diff.org3 PSI90.diff.org3 D2.diff.org3 HAC.diff.org3 # summarize results groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "W", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10)))
PSI4.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- wilcox.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- wilcox.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided")
Committed.OrgControl1 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "1") NonCommitted.OrgControl1 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "1") Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "2") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "2") Committed.OrgControl3 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "3") NonCommitted.OrgControl3 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "3")
PSI4.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- wilcox.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- wilcox.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided")
PSI4.diff.org1  # DIFFERENCE
r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(mean(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders
r1
r3 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[7], paste(round(mean(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3)))
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "W", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(mean(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders #r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) #rownames(r2) <- 1:nrow(r2) #colnames(r2) <- groupTableHeaders r3 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[7], paste(round(mean(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders # groupTable = rbind(r1, r2, r3) groupTable = rbind(r1, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
var.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score)
var.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score)
ansari.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided")
ansari.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided")
ggplot(Committed.OrgControl1, aes(x = PSI_4_SURG_COMP_Score)) + geom_bar()
ggplot(NonCommitted.OrgControl1, aes(x = PSI_4_SURG_COMP_Score)) +     geom_bar()
ggplot(Committed.OrgControl1, aes(x = PSI_4_SURG_COMP_Score)) + geom_histogram()
ggplot(NonCommitted.OrgControl1, aes(x = PSI_4_SURG_COMP_Score)) +     geom_histogram()
ggplot(NonCommitted.OrgControl1, aes(x = PSI_4_SURG_COMP_Score)) +     geom_histogram()
ggplot(Committed.OrgControl1, aes(x = PSI_4_SURG_COMP_Score)) + geom_histogram()
ggplot(NonCommitted.OrgControl1, aes(x = PSI_4_SURG_COMP_Score)) +     geom_histogram()
median(Committed.OrgControl1$PSI_4_SURG_COMP_Score)
median(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE)
median(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE)
t.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided")
boxplot(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score)
qqPlot(Committed.OrgControl1$PSI_4_SURG_COMP_Score)
qqPlot(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score)
ad.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score)
ad.test(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score)
boxPlot(Committed.OrgControl1$PSI_4_SURG_COMP_Score)
boxplot(Committed.OrgControl1$PSI_4_SURG_COMP_Score)
boxplot(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score)
PSI4.diff.org1 <- t.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org1 <- t.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- t.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- t.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- t.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- t.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- t.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- t.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") #Wilcox #PSI4.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #var.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score) #ansari.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org1 <- wilcox.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") #HAC.diff.org1 <- wilcox.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org1  # DIFFERENCE PSI6.diff.org1 PSI12.diff.org1 PSI14.diff.org1 PSI15.diff.org1 PSI90.diff.org1 D2.diff.org1 HAC.diff.org1 PSI4.diff.org2 <- t.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org2 <- t.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org2 <- t.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org2 <- t.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org2 <- t.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org2 <- t.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org2 <- t.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") HAC.diff.org2 <- t.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") #PSI4.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org2 <- wilcox.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #var.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score) #ansari.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #HAC.diff.org2 <- wilcox.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org2 PSI6.diff.org2 PSI12.diff.org2 PSI14.diff.org2 PSI15.diff.org2 PSI90.diff.org2 D2.diff.org2 # DIFFERENCE HAC.diff.org2 PSI4.diff.org3 <- t.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org3 <- t.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org3 <- t.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org3 <- t.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org3 <- t.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org3 <- t.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org3 <- t.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") HAC.diff.org3 <- t.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") #PSI4.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org3 <- wilcox.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") #HAC.diff.org3 <- wilcox.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org3 PSI6.diff.org3 PSI12.diff.org3 PSI14.diff.org3 PSI15.diff.org3 PSI90.diff.org3 D2.diff.org3 HAC.diff.org3
PSI12.diff.org2
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "W", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(mean(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[7], paste(round(mean(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders # groupTable = rbind(r1, r2, r3) groupTable = rbind(r1, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders
groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "W", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(mean(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[7], paste(round(mean(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) #groupTable = rbind(r1, r3)
?t.test
C.Reduction <- filter(CommittedRows$Total_HAC_Score > 6.75)
C.Reduction <- filter(CommittedRows, CommittedRows$Total_HAC_Score > 6.75)
C.Reduction <- nrows(filter(CommittedRows, CommittedRows$Total_HAC_Score > 6.75))
C.Reduction <- sum(filter(CommittedRows, CommittedRows$Total_HAC_Score > 6.75))
CommittedRows %>% filter(Total_HAC_Score > 6.75)
CommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n())
CommittedRows %>% filter(Total_HAC_Score >= 6.75) %>% summarise(n = n())
CommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n())
sum(is.na(CommittedRows[, "Total_HAC_Score"]))
NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) sum(is.na(NonCommittedRows[, "Total_HAC_Score"]))
NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n())
NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n())
sum(is.na(NonCommittedRows[, "Total_HAC_Score"]))
C.Reduction <- CommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) C.NoReduction <- CommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) C.Missing <- sum(is.na(CommittedRows[, "Total_HAC_Score"])) C.E <- data.frame("Committed", C.Reduction, C.NoReduction, C.Missing, round(C.Reduction)) rownames(C.E) <- 1:nrow(C.E) colnames(C.E) <- EligibleForReductionHeaders
EligibleForReductionHeaders <- c("Commitment", "Reduction", "No Reduction", "Missing") C.Reduction <- CommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) C.NoReduction <- CommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) C.Missing <- sum(is.na(CommittedRows[, "Total_HAC_Score"])) C.E <- data.frame("Committed", C.Reduction, C.NoReduction, C.Missing, round(C.Reduction)) rownames(C.E) <- 1:nrow(C.E) colnames(C.E) <- EligibleForReductionHeaders
NC.Reduction <- NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) NC.NoReduction <- NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) NC.Missing <- sum(is.na(NonCommittedRows[, "Total_HAC_Score"])) NC.E <- data.frame("NonCommitted", NC.Reduction, NC.NoReduction, NC.Missing) rownames(NC.E) <- 1:nrow(NC.E) colnames(NC.E) <- EligibleForReductionHeaders
EligibleForReduction <- rbind(C.E, NC.E)
C.E
NC.E
EligibleForReductionHeaders <- c("Commitment", "Reduction", "No Reduction", "Missing") C.Reduction <- CommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) C.NoReduction <- CommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) C.Missing <- sum(is.na(CommittedRows[, "Total_HAC_Score"])) C.E <- data.frame("Committed", C.Reduction, C.NoReduction, C.Missing) rownames(C.E) <- 1:nrow(C.E) colnames(C.E) <- EligibleForReductionHeaders NC.Reduction <- NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) NC.NoReduction <- NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) NC.Missing <- sum(is.na(NonCommittedRows[, "Total_HAC_Score"])) NC.E <- data.frame("NonCommitted", NC.Reduction, NC.NoReduction, NC.Missing) rownames(NC.E) <- 1:nrow(NC.E) colnames(NC.E) <- EligibleForReductionHeaders EligibleForReduction <- rbind(C.E, NC.E)
EligibleForReduction
EligibleForReductionHeaders <- c("Commitment", "Reduction", "No Reduction", "Missing") C.Reduction <- CommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) C.NoReduction <- CommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) C.Missing <- sum(is.na(CommittedRows[, "Total_HAC_Score"])) C.E <- data.frame("Committed", C.Reduction, C.NoReduction, C.Missing) rownames(C.E) <- 1:nrow(C.E) colnames(C.E) <- EligibleForReductionHeaders NC.Reduction <- NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) NC.NoReduction <- NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) NC.Missing <- sum(is.na(NonCommittedRows[, "Total_HAC_Score"])) NC.E <- data.frame("Non- committed", NC.Reduction, NC.NoReduction, NC.Missing) rownames(NC.E) <- 1:nrow(NC.E) colnames(NC.E) <- EligibleForReductionHeaders EligibleForReduction <- rbind(C.E, NC.E) NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) sum(is.na(NonCommittedRows[, "Total_HAC_Score"]))
EligibleForReductionHeaders <- c("Commitment", "Reduction", "No Reduction", "Missing") C.Reduction <- CommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) C.NoReduction <- CommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) C.Missing <- sum(is.na(CommittedRows[, "Total_HAC_Score"])) C.E <- data.frame("Committed", C.Reduction, C.NoReduction, C.Missing) rownames(C.E) <- 1:nrow(C.E) colnames(C.E) <- EligibleForReductionHeaders NC.Reduction <- NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) NC.NoReduction <- NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) NC.Missing <- sum(is.na(NonCommittedRows[, "Total_HAC_Score"])) NC.E <- data.frame("Non-committed", NC.Reduction, NC.NoReduction, NC.Missing) rownames(NC.E) <- 1:nrow(NC.E) colnames(NC.E) <- EligibleForReductionHeaders EligibleForReduction <- rbind(C.E, NC.E)
rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders EligibleForReductionHeaders <- c("Commitment", "Reduction", "No Reduction", "Unknown") C.Reduction <- CommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) C.NoReduction <- CommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) C.Missing <- sum(is.na(CommittedRows[, "Total_HAC_Score"])) C.E <- data.frame("Committed", C.Reduction, C.NoReduction, C.Missing) rownames(C.E) <- 1:nrow(C.E) colnames(C.E) <- EligibleForReductionHeaders NC.Reduction <- NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) NC.NoReduction <- NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) NC.Missing <- sum(is.na(NonCommittedRows[, "Total_HAC_Score"])) NC.E <- data.frame("Non-committed", NC.Reduction, NC.NoReduction, NC.Missing) rownames(NC.E) <- 1:nrow(NC.E) colnames(NC.E) <- EligibleForReductionHeaders EligibleForReduction <- rbind(C.E, NC.E)
library(bookdown)
library(bookdown)
head(mtcars[, 1:8], 10)
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } if (!('nortest' %in% rownames(installed.packages()))) {     install.packages('nortest') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) library(nortest) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) measure.names <- data.frame(Code = c("PSI4", "PSI6", "PSI12", "PSI14", "PSI15", "PSI90", "D2", "HAC"), Measure = c("PSI_4_SURG_COMP_Score", "PSI_4_SURG_COMP_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_90_SAFETY_Score", "Domain2_Score", "Total_HAC_Score"), row.names = 1) # Filter data to only complete cases # hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                           ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                           ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                           ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # OrgControlOverallNum hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall))) OrgControlOverallNames <- unique(hospitalData$OrgControlOverall) # VIEW (DEBUG) # view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) C.OrgControlCount <- CommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) NC.OrgControlCount <- NonCommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) ## histogram of demographics #ggplot(CommittedRows, aes(x = NofBeds)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = NofSurgicalOperations)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = FullTimeEmployees)) +     #geom_histogram() # DEMOGRAPHIC DIFFERENCE IN MEAN TESTS # NofBeds NofBeds.Diff <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds, alternative = "two.sided", mu = 0, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) # NofSurgicalOperations C.NofSurgicalOperations.val <- na.omit(CommittedRows$NofSurgicalOperations) NC.NofSurgicalOperations.val <- na.omit(NonCommittedRows$NofSurgicalOperations) C.NofSurgicalOperations.sd <- sd(CommittedRows$NofSurgicalOperations, na.rm = TRUE) NC.NofSurgicalOperations.sd <- sd(NonCommittedRows$NofSurgicalOperations, na.rm = TRUE) NofSurgicalOperations.Diff <- z.test(C.NofSurgicalOperations.val, NC.NofSurgicalOperations.val, alternative = "two.sided", mu = 0, sigma.x = C.NofSurgicalOperations.sd, sigma.y = NC.NofSurgicalOperations.sd) # FullTimeEmployees C.FullTimeEmployees.val <- na.omit(CommittedRows$FullTimeEmployees) NC.FullTimeEmployees.val <- na.omit(NonCommittedRows$FullTimeEmployees) C.FullTimeEmployees.sd <- sd(CommittedRows$FullTimeEmployees, na.rm = TRUE) NC.FullTimeEmployees.sd <- sd(NonCommittedRows$FullTimeEmployees, na.rm = TRUE) FullTimeEmployees.Diff <- z.test(C.FullTimeEmployees.val, NC.FullTimeEmployees.val, alternative = "two.sided", mu = 0, sigma.x = C.FullTimeEmployees.sd, sigma.y = NC.FullTimeEmployees.sd) # Response variable difference in mean tests PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff <- t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "two.sided") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "two.sided") # ANOVA between org control within each group C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI4.aov) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI6.aov) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI12.aov) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI14.aov) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI15.aov) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI90.aov) # ANOVA results C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) summary(C.D2.aov) C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.HAC.aov) # Tukey results C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)) C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)) # ANOVA results NC.PSI4.aov <- aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI4.aov) # Tukey results NC.PSI4.tukey <- TukeyHSD(aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum)) NC.PSI6.aov <- aov(NonCommittedRows$PSI_6_IAT_PTX_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI6.aov) NC.PSI12.aov <- aov(NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI12.aov) NC.PSI14.aov <- aov(NonCommittedRows$PSI_14_POSTOP_DEHIS_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI14.aov) NC.PSI15.aov <- aov(NonCommittedRows$PSI_15_ACC_LAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI15.aov) NC.PSI90.aov <- aov(NonCommittedRows$PSI_90_SAFETY_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI90.aov) NC.D2.aov <- aov(NonCommittedRows$Domain2_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.D2.aov) NC.HANC.aov <- aov(NonCommittedRows$Total_HAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.HANC.aov) #TUKEY RESULT SPECIFIC ANALYSIS (NOT SURE IF THIS IS VALID! THESE COMMANDS ARE MISSING SOME COMPARISONS) t.test(NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "greater") t.test(Committed.OrgControl2$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative = "greater") # split data among ownership types within committed vs non-committed Committed.OrgControl1 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "1") NonCommitted.OrgControl1 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "1") Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "2") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "2") Committed.OrgControl3 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "3") NonCommitted.OrgControl3 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "3") #t-tests PSI4.diff.org1 <- t.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org1 <- t.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- t.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- t.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- t.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- t.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- t.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- t.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") #Wilcox #PSI4.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #var.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score) #ansari.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org1 <- wilcox.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") #HAC.diff.org1 <- wilcox.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org1  # DIFFERENCE PSI6.diff.org1 PSI12.diff.org1 PSI14.diff.org1 PSI15.diff.org1 PSI90.diff.org1 D2.diff.org1 HAC.diff.org1 PSI4.diff.org2 <- t.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org2 <- t.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org2 <- t.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org2 <- t.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org2 <- t.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org2 <- t.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org2 <- t.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") HAC.diff.org2 <- t.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") #PSI4.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org2 <- wilcox.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #var.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score) #ansari.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #HAC.diff.org2 <- wilcox.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org2 PSI6.diff.org2 PSI12.diff.org2 #Difference PSI14.diff.org2 PSI15.diff.org2 PSI90.diff.org2 D2.diff.org2 # DIFFERENCE HAC.diff.org2 PSI4.diff.org3 <- t.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org3 <- t.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org3 <- t.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org3 <- t.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org3 <- t.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org3 <- t.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org3 <- t.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") HAC.diff.org3 <- t.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") #PSI4.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org3 <- wilcox.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") #HAC.diff.org3 <- wilcox.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org3 PSI6.diff.org3 PSI12.diff.org3 PSI14.diff.org3 PSI15.diff.org3 PSI90.diff.org3 D2.diff.org3 HAC.diff.org3 # summarize results groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "W", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(mean(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[7], paste(round(mean(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) #groupTable = rbind(r1, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders EligibleForReductionHeaders <- c("Commitment", "Reduction", "No Reduction", "Unknown") C.Reduction <- CommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) C.NoReduction <- CommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) C.Missing <- sum(is.na(CommittedRows[, "Total_HAC_Score"])) C.E <- data.frame("Committed", C.Reduction, C.NoReduction, C.Missing) rownames(C.E) <- 1:nrow(C.E) colnames(C.E) <- EligibleForReductionHeaders NC.Reduction <- NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) NC.NoReduction <- NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) NC.Missing <- sum(is.na(NonCommittedRows[, "Total_HAC_Score"])) NC.E <- data.frame("Non-committed", NC.Reduction, NC.NoReduction, NC.Missing) rownames(NC.E) <- 1:nrow(NC.E) colnames(NC.E) <- EligibleForReductionHeaders EligibleForReduction <- rbind(C.E, NC.E)
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } if (!('nortest' %in% rownames(installed.packages()))) {     install.packages('nortest') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) library(nortest) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) measure.names <- data.frame(Code = c("PSI4", "PSI6", "PSI12", "PSI14", "PSI15", "PSI90", "D2", "HAC"), Measure = c("PSI_4_SURG_COMP_Score", "PSI_4_SURG_COMP_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_90_SAFETY_Score", "Domain2_Score", "Total_HAC_Score"), row.names = 1) # Filter data to only complete cases # hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                           ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                           ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                           ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # OrgControlOverallNum hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall))) OrgControlOverallNames <- unique(hospitalData$OrgControlOverall) # VIEW (DEBUG) # view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) C.OrgControlCount <- CommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) NC.OrgControlCount <- NonCommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) ## histogram of demographics #ggplot(CommittedRows, aes(x = NofBeds)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = NofSurgicalOperations)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = FullTimeEmployees)) +     #geom_histogram() # DEMOGRAPHIC DIFFERENCE IN MEAN TESTS # NofBeds NofBeds.Diff <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds, alternative = "two.sided", mu = 0, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) # NofSurgicalOperations C.NofSurgicalOperations.val <- na.omit(CommittedRows$NofSurgicalOperations) NC.NofSurgicalOperations.val <- na.omit(NonCommittedRows$NofSurgicalOperations) C.NofSurgicalOperations.sd <- sd(CommittedRows$NofSurgicalOperations, na.rm = TRUE) NC.NofSurgicalOperations.sd <- sd(NonCommittedRows$NofSurgicalOperations, na.rm = TRUE) NofSurgicalOperations.Diff <- z.test(C.NofSurgicalOperations.val, NC.NofSurgicalOperations.val, alternative = "two.sided", mu = 0, sigma.x = C.NofSurgicalOperations.sd, sigma.y = NC.NofSurgicalOperations.sd) # FullTimeEmployees C.FullTimeEmployees.val <- na.omit(CommittedRows$FullTimeEmployees) NC.FullTimeEmployees.val <- na.omit(NonCommittedRows$FullTimeEmployees) C.FullTimeEmployees.sd <- sd(CommittedRows$FullTimeEmployees, na.rm = TRUE) NC.FullTimeEmployees.sd <- sd(NonCommittedRows$FullTimeEmployees, na.rm = TRUE) FullTimeEmployees.Diff <- z.test(C.FullTimeEmployees.val, NC.FullTimeEmployees.val, alternative = "two.sided", mu = 0, sigma.x = C.FullTimeEmployees.sd, sigma.y = NC.FullTimeEmployees.sd) # Response variable difference in mean tests PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff <- t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "two.sided") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "two.sided") # ANOVA between org control within each group C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI4.aov) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI6.aov) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI12.aov) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI14.aov) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI15.aov) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI90.aov) # ANOVA results C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) summary(C.D2.aov) C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.HAC.aov) # Tukey results C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)) C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)) # ANOVA results NC.PSI4.aov <- aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI4.aov) # Tukey results NC.PSI4.tukey <- TukeyHSD(aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum)) NC.PSI6.aov <- aov(NonCommittedRows$PSI_6_IAT_PTX_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI6.aov) NC.PSI12.aov <- aov(NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI12.aov) NC.PSI14.aov <- aov(NonCommittedRows$PSI_14_POSTOP_DEHIS_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI14.aov) NC.PSI15.aov <- aov(NonCommittedRows$PSI_15_ACC_LAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI15.aov) NC.PSI90.aov <- aov(NonCommittedRows$PSI_90_SAFETY_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI90.aov) NC.D2.aov <- aov(NonCommittedRows$Domain2_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.D2.aov) NC.HANC.aov <- aov(NonCommittedRows$Total_HAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.HANC.aov) #TUKEY RESULT SPECIFIC ANALYSIS (NOT SURE IF THIS IS VALID! THESE COMMANDS ARE MISSING SOME COMPARISONS) t.test(NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "greater") t.test(Committed.OrgControl2$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative = "greater") # split data among ownership types within committed vs non-committed Committed.OrgControl1 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "1") NonCommitted.OrgControl1 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "1") Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "2") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "2") Committed.OrgControl3 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "3") NonCommitted.OrgControl3 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "3") #t-tests PSI4.diff.org1 <- t.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org1 <- t.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- t.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- t.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- t.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- t.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- t.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- t.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") #Wilcox #PSI4.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #var.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score) #ansari.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org1 <- wilcox.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") #HAC.diff.org1 <- wilcox.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org1  # DIFFERENCE PSI6.diff.org1 PSI12.diff.org1 PSI14.diff.org1 PSI15.diff.org1 PSI90.diff.org1 D2.diff.org1 HAC.diff.org1 PSI4.diff.org2 <- t.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org2 <- t.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org2 <- t.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org2 <- t.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org2 <- t.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org2 <- t.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org2 <- t.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") HAC.diff.org2 <- t.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") #PSI4.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org2 <- wilcox.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #var.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score) #ansari.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #HAC.diff.org2 <- wilcox.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org2 PSI6.diff.org2 PSI12.diff.org2 #Difference PSI14.diff.org2 PSI15.diff.org2 PSI90.diff.org2 D2.diff.org2 # DIFFERENCE HAC.diff.org2 PSI4.diff.org3 <- t.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org3 <- t.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org3 <- t.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org3 <- t.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org3 <- t.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org3 <- t.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org3 <- t.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") HAC.diff.org3 <- t.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") #PSI4.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org3 <- wilcox.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") #HAC.diff.org3 <- wilcox.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org3 PSI6.diff.org3 PSI12.diff.org3 PSI14.diff.org3 PSI15.diff.org3 PSI90.diff.org3 D2.diff.org3 HAC.diff.org3 # summarize results groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "W", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(mean(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[7], paste(round(mean(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) #groupTable = rbind(r1, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders EligibleForReductionHeaders <- c("Commitment", "Reduction", "No Reduction", "Unknown") C.Reduction <- CommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) C.NoReduction <- CommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) C.Missing <- sum(is.na(CommittedRows[, "Total_HAC_Score"])) C.E <- data.frame("Committed", C.Reduction, C.NoReduction, C.Missing) rownames(C.E) <- 1:nrow(C.E) colnames(C.E) <- EligibleForReductionHeaders NC.Reduction <- NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) NC.NoReduction <- NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) NC.Missing <- sum(is.na(NonCommittedRows[, "Total_HAC_Score"])) NC.E <- data.frame("Non-committed", NC.Reduction, NC.NoReduction, NC.Missing) rownames(NC.E) <- 1:nrow(NC.E) colnames(NC.E) <- EligibleForReductionHeaders EligibleForReduction <- rbind(C.E, NC.E) #TESTING STUFF HERE #ggplot(NonCommittedRows, aes(x = PSI_4_SURG_COMP_Score)) + #geom_histogram() #ggplot(CommittedRows, aes(x = OrgControlOverall)) +     #geom_bar() ## check for normality ##qqPlot(CommittedRows$Domain2_Score) ##boxplot(CommittedRows$Domain2_Score) #ad.test(CommittedRows$Domain2_Score) ## check for equality of variances #leveneTest(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) ##ggplot(CommittedRows, aes(x = log(Domain2_Score)) + ##geom_histogram() ## Tranformations #library(MASS) #out <- boxcox(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) #lambda <- round(out$x[which.max(out$y)], 1) #lambda ## transform data - create new column yt using boxcox lambda #CommittedRows <- mutate(CommittedRows, Domain2_Score_T = Domain2_Score ^ lambda) ## summarize data by Machine #CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score_T.avg = mean(Domain2_Score_T, na.rm = TRUE), Domain2_Score_T.sd = sd(Domain2_Score_T, na.rm = TRUE)) #CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score.avg = mean(Domain2_Score, na.rm = TRUE), Domain2_Score.sd = sd(Domain2_Score, na.rm = TRUE)) ## check for normality on transformed data (transformed data is normal) #C.D2_T.aov <- aov(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum) #summary(C.D2_T.aov) #ad.test(residuals(C.D2_T.aov)) ## levene test on transformed data (indicates there is no difference in variance) #leveneTest(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum) ## bartlett test on transformed data (indicates there is no difference in variance) #bartlett.test(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum) #ggplot(CommittedRows, aes(x = Total_HAC_Score)) + #geom_histogram() ## check for normality #qqPlot(CommittedRows$Total_HAC_Score) #boxplot(CommittedRows$Total_HAC_Score) #ad.test(residuals(C.HAC.aov)) #leveneTest(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)
rtvs::debug_source("script.R")
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } if (!('nortest' %in% rownames(installed.packages()))) {     install.packages('nortest') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) library(nortest) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) measure.names <- data.frame(Code = c("PSI4", "PSI6", "PSI12", "PSI14", "PSI15", "PSI90", "D2", "HAC"), Measure = c("PSI_4_SURG_COMP_Score", "PSI_4_SURG_COMP_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_90_SAFETY_Score", "Domain2_Score", "Total_HAC_Score"), row.names = 1) # Filter data to only complete cases # hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                           ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                           ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                           ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # OrgControlOverallNum hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall))) OrgControlOverallNames <- unique(hospitalData$OrgControlOverall) # VIEW (DEBUG) # view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) C.OrgControlCount <- CommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) NC.OrgControlCount <- NonCommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) ## histogram of demographics #ggplot(CommittedRows, aes(x = NofBeds)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = NofSurgicalOperations)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = FullTimeEmployees)) +     #geom_histogram() # DEMOGRAPHIC DIFFERENCE IN MEAN TESTS # NofBeds NofBeds.Diff <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds, alternative = "two.sided", mu = 0, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) # NofSurgicalOperations C.NofSurgicalOperations.val <- na.omit(CommittedRows$NofSurgicalOperations) NC.NofSurgicalOperations.val <- na.omit(NonCommittedRows$NofSurgicalOperations) C.NofSurgicalOperations.sd <- sd(CommittedRows$NofSurgicalOperations, na.rm = TRUE) NC.NofSurgicalOperations.sd <- sd(NonCommittedRows$NofSurgicalOperations, na.rm = TRUE) NofSurgicalOperations.Diff <- z.test(C.NofSurgicalOperations.val, NC.NofSurgicalOperations.val, alternative = "two.sided", mu = 0, sigma.x = C.NofSurgicalOperations.sd, sigma.y = NC.NofSurgicalOperations.sd) # FullTimeEmployees C.FullTimeEmployees.val <- na.omit(CommittedRows$FullTimeEmployees) NC.FullTimeEmployees.val <- na.omit(NonCommittedRows$FullTimeEmployees) C.FullTimeEmployees.sd <- sd(CommittedRows$FullTimeEmployees, na.rm = TRUE) NC.FullTimeEmployees.sd <- sd(NonCommittedRows$FullTimeEmployees, na.rm = TRUE) FullTimeEmployees.Diff <- z.test(C.FullTimeEmployees.val, NC.FullTimeEmployees.val, alternative = "two.sided", mu = 0, sigma.x = C.FullTimeEmployees.sd, sigma.y = NC.FullTimeEmployees.sd) # Response variable difference in mean tests PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff <- t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "two.sided") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "two.sided") # ANOVA between org control within each group C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI4.aov) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI6.aov) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI12.aov) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI14.aov) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI15.aov) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI90.aov) # ANOVA results C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) summary(C.D2.aov) C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.HAC.aov) # Tukey results C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)) C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)) # ANOVA results NC.PSI4.aov <- aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI4.aov) # Tukey results NC.PSI4.tukey <- TukeyHSD(aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum)) NC.PSI6.aov <- aov(NonCommittedRows$PSI_6_IAT_PTX_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI6.aov) NC.PSI12.aov <- aov(NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI12.aov) NC.PSI14.aov <- aov(NonCommittedRows$PSI_14_POSTOP_DEHIS_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI14.aov) NC.PSI15.aov <- aov(NonCommittedRows$PSI_15_ACC_LAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI15.aov) NC.PSI90.aov <- aov(NonCommittedRows$PSI_90_SAFETY_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI90.aov) NC.D2.aov <- aov(NonCommittedRows$Domain2_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.D2.aov) NC.HANC.aov <- aov(NonCommittedRows$Total_HAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.HANC.aov) #TUKEY RESULT SPECIFIC ANALYSIS (NOT SURE IF THIS IS VALID! THESE COMMANDS ARE MISSING SOME COMPARISONS) t.test(NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "greater") t.test(Committed.OrgControl2$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative = "greater") # split data among ownership types within committed vs non-committed Committed.OrgControl1 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "1") NonCommitted.OrgControl1 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "1") Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "2") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "2") Committed.OrgControl3 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "3") NonCommitted.OrgControl3 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "3") #t-tests PSI4.diff.org1 <- t.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org1 <- t.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- t.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- t.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- t.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- t.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- t.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- t.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") #Wilcox #PSI4.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #var.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score) #ansari.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org1 <- wilcox.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") #HAC.diff.org1 <- wilcox.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org1  # DIFFERENCE PSI6.diff.org1 PSI12.diff.org1 PSI14.diff.org1 PSI15.diff.org1 PSI90.diff.org1 D2.diff.org1 HAC.diff.org1 PSI4.diff.org2 <- t.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org2 <- t.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org2 <- t.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org2 <- t.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org2 <- t.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org2 <- t.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org2 <- t.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") HAC.diff.org2 <- t.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") #PSI4.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org2 <- wilcox.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #var.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score) #ansari.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #HAC.diff.org2 <- wilcox.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org2 PSI6.diff.org2 PSI12.diff.org2 #Difference PSI14.diff.org2 PSI15.diff.org2 PSI90.diff.org2 D2.diff.org2 # DIFFERENCE HAC.diff.org2 PSI4.diff.org3 <- t.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org3 <- t.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org3 <- t.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org3 <- t.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org3 <- t.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org3 <- t.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org3 <- t.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") HAC.diff.org3 <- t.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") #PSI4.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org3 <- wilcox.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") #HAC.diff.org3 <- wilcox.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org3 PSI6.diff.org3 PSI12.diff.org3 PSI14.diff.org3 PSI15.diff.org3 PSI90.diff.org3 D2.diff.org3 HAC.diff.org3 # summarize results groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "W", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(mean(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[7], paste(round(mean(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) #groupTable = rbind(r1, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders EligibleForReductionHeaders <- c("Commitment", "Reduction", "No Reduction", "Unknown") C.Reduction <- CommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) C.NoReduction <- CommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) C.Missing <- sum(is.na(CommittedRows[, "Total_HAC_Score"])) C.E <- data.frame("Committed", C.Reduction, C.NoReduction, C.Missing) rownames(C.E) <- 1:nrow(C.E) colnames(C.E) <- EligibleForReductionHeaders NC.Reduction <- NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) NC.NoReduction <- NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) NC.Missing <- sum(is.na(NonCommittedRows[, "Total_HAC_Score"])) NC.E <- data.frame("Non-committed", NC.Reduction, NC.NoReduction, NC.Missing) rownames(NC.E) <- 1:nrow(NC.E) colnames(NC.E) <- EligibleForReductionHeaders EligibleForReduction <- rbind(C.E, NC.E) #TESTING STUFF HERE #ggplot(NonCommittedRows, aes(x = PSI_4_SURG_COMP_Score)) + #geom_histogram() #ggplot(CommittedRows, aes(x = OrgControlOverall)) +     #geom_bar() ## check for normality ##qqPlot(CommittedRows$Domain2_Score) ##boxplot(CommittedRows$Domain2_Score) #ad.test(CommittedRows$Domain2_Score) ## check for equality of variances #leveneTest(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) ##ggplot(CommittedRows, aes(x = log(Domain2_Score)) + ##geom_histogram() ## Tranformations #library(MASS) #out <- boxcox(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) #lambda <- round(out$x[which.max(out$y)], 1) #lambda ## transform data - create new column yt using boxcox lambda #CommittedRows <- mutate(CommittedRows, Domain2_Score_T = Domain2_Score ^ lambda) ## summarize data by Machine #CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score_T.avg = mean(Domain2_Score_T, na.rm = TRUE), Domain2_Score_T.sd = sd(Domain2_Score_T, na.rm = TRUE)) #CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score.avg = mean(Domain2_Score, na.rm = TRUE), Domain2_Score.sd = sd(Domain2_Score, na.rm = TRUE)) ## check for normality on transformed data (transformed data is normal) #C.D2_T.aov <- aov(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum) #summary(C.D2_T.aov) #ad.test(residuals(C.D2_T.aov)) ## levene test on transformed data (indicates there is no difference in variance) #leveneTest(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum) ## bartlett test on transformed data (indicates there is no difference in variance) #bartlett.test(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum) #ggplot(CommittedRows, aes(x = Total_HAC_Score)) + #geom_histogram() ## check for normality #qqPlot(CommittedRows$Total_HAC_Score) #boxplot(CommittedRows$Total_HAC_Score) #ad.test(residuals(C.HAC.aov)) #leveneTest(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)
t.test(NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "greater") t.test(Committed.OrgControl2$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative = "greater")
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } if (!('nortest' %in% rownames(installed.packages()))) {     install.packages('nortest') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) library(nortest) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) measure.names <- data.frame(Code = c("PSI4", "PSI6", "PSI12", "PSI14", "PSI15", "PSI90", "D2", "HAC"), Measure = c("PSI_4_SURG_COMP_Score", "PSI_4_SURG_COMP_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_90_SAFETY_Score", "Domain2_Score", "Total_HAC_Score"), row.names = 1) # Filter data to only complete cases # hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                           ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                           ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                           ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # OrgControlOverallNum hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall))) OrgControlOverallNames <- unique(hospitalData$OrgControlOverall) # VIEW (DEBUG) # view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) C.OrgControlCount <- CommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) NC.OrgControlCount <- NonCommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) ## histogram of demographics #ggplot(CommittedRows, aes(x = NofBeds)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = NofSurgicalOperations)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = FullTimeEmployees)) +     #geom_histogram() # DEMOGRAPHIC DIFFERENCE IN MEAN TESTS # NofBeds NofBeds.Diff <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds, alternative = "two.sided", mu = 0, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) # NofSurgicalOperations C.NofSurgicalOperations.val <- na.omit(CommittedRows$NofSurgicalOperations) NC.NofSurgicalOperations.val <- na.omit(NonCommittedRows$NofSurgicalOperations) C.NofSurgicalOperations.sd <- sd(CommittedRows$NofSurgicalOperations, na.rm = TRUE) NC.NofSurgicalOperations.sd <- sd(NonCommittedRows$NofSurgicalOperations, na.rm = TRUE) NofSurgicalOperations.Diff <- z.test(C.NofSurgicalOperations.val, NC.NofSurgicalOperations.val, alternative = "two.sided", mu = 0, sigma.x = C.NofSurgicalOperations.sd, sigma.y = NC.NofSurgicalOperations.sd) # FullTimeEmployees C.FullTimeEmployees.val <- na.omit(CommittedRows$FullTimeEmployees) NC.FullTimeEmployees.val <- na.omit(NonCommittedRows$FullTimeEmployees) C.FullTimeEmployees.sd <- sd(CommittedRows$FullTimeEmployees, na.rm = TRUE) NC.FullTimeEmployees.sd <- sd(NonCommittedRows$FullTimeEmployees, na.rm = TRUE) FullTimeEmployees.Diff <- z.test(C.FullTimeEmployees.val, NC.FullTimeEmployees.val, alternative = "two.sided", mu = 0, sigma.x = C.FullTimeEmployees.sd, sigma.y = NC.FullTimeEmployees.sd) # Response variable difference in mean tests PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff <- t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "two.sided") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "two.sided") # ANOVA between org control within each group C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI4.aov) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI6.aov) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI12.aov) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI14.aov) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI15.aov) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI90.aov) # ANOVA results C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) summary(C.D2.aov) C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.HAC.aov) # Tukey results C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)) C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)) # ANOVA results NC.PSI4.aov <- aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI4.aov) # Tukey results NC.PSI4.tukey <- TukeyHSD(aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum)) NC.PSI6.aov <- aov(NonCommittedRows$PSI_6_IAT_PTX_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI6.aov) NC.PSI12.aov <- aov(NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI12.aov) NC.PSI14.aov <- aov(NonCommittedRows$PSI_14_POSTOP_DEHIS_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI14.aov) NC.PSI15.aov <- aov(NonCommittedRows$PSI_15_ACC_LAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI15.aov) NC.PSI90.aov <- aov(NonCommittedRows$PSI_90_SAFETY_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI90.aov) NC.D2.aov <- aov(NonCommittedRows$Domain2_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.D2.aov) NC.HANC.aov <- aov(NonCommittedRows$Total_HAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.HANC.aov) #TUKEY RESULT SPECIFIC ANALYSIS (NOT SURE IF THIS IS VALID! THESE COMMANDS ARE MISSING SOME COMPARISONS) t.test(NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "greater") t.test(Committed.OrgControl2$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative = "greater") # split data among ownership types within committed vs non-committed Committed.OrgControl1 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "1") NonCommitted.OrgControl1 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "1") Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "2") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "2") Committed.OrgControl3 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "3") NonCommitted.OrgControl3 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "3") #t-tests PSI4.diff.org1 <- t.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org1 <- t.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- t.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- t.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- t.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- t.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- t.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- t.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") #Wilcox #PSI4.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #var.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score) #ansari.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org1 <- wilcox.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") #HAC.diff.org1 <- wilcox.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org1  # DIFFERENCE PSI6.diff.org1 PSI12.diff.org1 PSI14.diff.org1 PSI15.diff.org1 PSI90.diff.org1 D2.diff.org1 HAC.diff.org1 PSI4.diff.org2 <- t.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org2 <- t.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org2 <- t.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org2 <- t.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org2 <- t.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org2 <- t.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org2 <- t.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") HAC.diff.org2 <- t.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") #PSI4.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org2 <- wilcox.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #var.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score) #ansari.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #HAC.diff.org2 <- wilcox.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org2 PSI6.diff.org2 PSI12.diff.org2 #Difference PSI14.diff.org2 PSI15.diff.org2 PSI90.diff.org2 D2.diff.org2 # DIFFERENCE HAC.diff.org2 PSI4.diff.org3 <- t.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org3 <- t.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org3 <- t.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org3 <- t.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org3 <- t.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org3 <- t.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org3 <- t.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") HAC.diff.org3 <- t.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") #PSI4.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org3 <- wilcox.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") #HAC.diff.org3 <- wilcox.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org3 PSI6.diff.org3 PSI12.diff.org3 PSI14.diff.org3 PSI15.diff.org3 PSI90.diff.org3 D2.diff.org3 HAC.diff.org3 # summarize results groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "W", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(mean(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[7], paste(round(mean(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) #groupTable = rbind(r1, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders EligibleForReductionHeaders <- c("Commitment", "Reduction", "No Reduction", "Unknown") C.Reduction <- CommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) C.NoReduction <- CommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) C.Missing <- sum(is.na(CommittedRows[, "Total_HAC_Score"])) C.E <- data.frame("Committed", C.Reduction, C.NoReduction, C.Missing) rownames(C.E) <- 1:nrow(C.E) colnames(C.E) <- EligibleForReductionHeaders NC.Reduction <- NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) NC.NoReduction <- NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) NC.Missing <- sum(is.na(NonCommittedRows[, "Total_HAC_Score"])) NC.E <- data.frame("Non-committed", NC.Reduction, NC.NoReduction, NC.Missing) rownames(NC.E) <- 1:nrow(NC.E) colnames(NC.E) <- EligibleForReductionHeaders EligibleForReduction <- rbind(C.E, NC.E) #TESTING STUFF HERE #ggplot(NonCommittedRows, aes(x = PSI_4_SURG_COMP_Score)) + #geom_histogram() #ggplot(CommittedRows, aes(x = OrgControlOverall)) +     #geom_bar() ## check for normality ##qqPlot(CommittedRows$Domain2_Score) ##boxplot(CommittedRows$Domain2_Score) #ad.test(CommittedRows$Domain2_Score) ## check for equality of variances #leveneTest(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) ##ggplot(CommittedRows, aes(x = log(Domain2_Score)) + ##geom_histogram() ## Tranformations #library(MASS) #out <- boxcox(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) #lambda <- round(out$x[which.max(out$y)], 1) #lambda ## transform data - create new column yt using boxcox lambda #CommittedRows <- mutate(CommittedRows, Domain2_Score_T = Domain2_Score ^ lambda) ## summarize data by Machine #CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score_T.avg = mean(Domain2_Score_T, na.rm = TRUE), Domain2_Score_T.sd = sd(Domain2_Score_T, na.rm = TRUE)) #CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score.avg = mean(Domain2_Score, na.rm = TRUE), Domain2_Score.sd = sd(Domain2_Score, na.rm = TRUE)) ## check for normality on transformed data (transformed data is normal) #C.D2_T.aov <- aov(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum) #summary(C.D2_T.aov) #ad.test(residuals(C.D2_T.aov)) ## levene test on transformed data (indicates there is no difference in variance) #leveneTest(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum) ## bartlett test on transformed data (indicates there is no difference in variance) #bartlett.test(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum) #ggplot(CommittedRows, aes(x = Total_HAC_Score)) + #geom_histogram() ## check for normality #qqPlot(CommittedRows$Total_HAC_Score) #boxplot(CommittedRows$Total_HAC_Score) #ad.test(residuals(C.HAC.aov)) #leveneTest(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)
# Check for and install necessary packages if (!('RODBC' %in% rownames(installed.packages()))) {     install.packages('RODBC') } if (!('car' %in% rownames(installed.packages()))) {     install.packages('car') } if (!('psych' %in% rownames(installed.packages()))) {     install.packages('psych') } #if (!('sjPlot' %in% rownames(installed.packages()))) {     #install.packages('sjPlot') #} if (!('summarytools' %in% rownames(installed.packages()))) {     install.packages('summarytools') } if (!('dplyr' %in% rownames(installed.packages()))) {     install.packages('dplyr') } if (!('pander' %in% rownames(installed.packages()))) {     install.packages('pander') } if (!('ggplot2' %in% rownames(installed.packages()))) {     install.packages('ggplot2') } if (!('BSDA' %in% rownames(installed.packages()))) {     install.packages('BSDA') } if (!('nortest' %in% rownames(installed.packages()))) {     install.packages('nortest') } # Load necessary libraries library(RODBC) library(car) library(psych) #library(sjPlot) library(summarytools) library(dplyr) library(pander) library(ggplot2) library(BSDA) library(nortest) # Connect to data source and load data cn <- odbcDriverConnect(connection = "Driver={SQL Server Native Client 11.0};server=192.168.1.12;database=DorenfestStage;Uid=sa;Pwd=Suprem3One!;") hospitalData <- sqlFetch(cn, 'vHospitalDataSet', colnames = FALSE, rows_at_time = 1000, as.is = c(2, 3, 4, 5, 6, 7, 8, 27, 34, 35, 36)) # Misc. data cleanup and transformations hospitalData$ISPlanCommittedToReduceMedicalErrors <- as.factor(hospitalData$ISPlanCommittedToReduceMedicalErrors) hospitalData$Domain2_Score <- as.numeric(hospitalData$Domain2_Score) hospitalData$Total_HAC_Score <- as.numeric(hospitalData$Total_HAC_Score) # Select only desired columns hospitalData.Demo <- hospitalData %>% select(ISPlanCommittedToReduceMedicalErrors, MedicareNumber, HospitalName, HospitalUniqueId, NofBeds, NofSurgicalOperations, FullTimeEmployees, OwnershipStatus, OrgControlOverall, OrgControlDetail, ParentName, ParentUniqueId) hospitalData.Data <- hospitalData %>% select(HospitalUniqueId, AHRQ_PSI_90_Score, CLABSI_Score, CAUTI_Score, SSI_Score, Domain2_Score, Total_HAC_Score, PSI_12_POSTOP_PULMEMB_DVT_Score, PSI_14_POSTOP_DEHIS_Score, PSI_15_ACC_LAC_Score, PSI_4_SURG_COMP_Score, PSI_6_IAT_PTX_Score, PSI_90_SAFETY_Score) measure.names <- data.frame(Code = c("PSI4", "PSI6", "PSI12", "PSI14", "PSI15", "PSI90", "D2", "HAC"), Measure = c("PSI_4_SURG_COMP_Score", "PSI_4_SURG_COMP_Score", "PSI_12_POSTOP_PULMEMB_DVT_Score", "PSI_14_POSTOP_DEHIS_Score", "PSI_15_ACC_LAC_Score", "PSI_90_SAFETY_Score", "Domain2_Score", "Total_HAC_Score"), row.names = 1) # Filter data to only complete cases # hospitalData.Data <- hospitalData.Data[complete.cases(hospitalData.Data),] # Recombine data hospitalData <- inner_join(hospitalData.Demo, hospitalData.Data, by = "HospitalUniqueId") # Feature generation # IS Plan hospitalData <- hospitalData %>% mutate(PlanToReduceErrors = ifelse(.$ISPlanCommittedToReduceMedicalErrors == "1", "Committed", "Not Committed")) hospitalData$PlanToReduceErrors <- as.factor(hospitalData$PlanToReduceErrors) # Bed classification hospitalData <- hospitalData %>% mutate(NofBedsCategory = ifelse(.$NofBeds <= 100, "0-100",                                                           ifelse(.$NofBeds >= 101 & .$NofBeds <= 200, "101-200",                                                           ifelse(.$NofBeds >= 201 & .$NofBeds <= 300, "201-300",                                                           ifelse(.$NofBeds >= 301 & .$NofBeds <= 400, "301-400",                                                           ifelse(.$NofBeds >= 401 & .$NofBeds <= 500, "401-500",                                                           ifelse(.$NofBeds >= 501 & .$NofBeds <= 600, "501-600", "601+"))))))) hospitalData$NofBedsCategory <- as.factor(hospitalData$NofBedsCategory) # OrgControlOverallNum hospitalData <- mutate(hospitalData, OrgControlOverallNum = as.factor(as.numeric(OrgControlOverall))) OrgControlOverallNames <- unique(hospitalData$OrgControlOverall) # VIEW (DEBUG) # view(dfSummary(hospitalData), method = "browser") # Data Set Splitting CommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "1") NonCommittedRows <- filter(hospitalData, hospitalData$ISPlanCommittedToReduceMedicalErrors == "0") # Summaries CommittedRows.summary <- describe(CommittedRows, skew = FALSE) NonCommittedRows.summary <- describe(NonCommittedRows, skew = FALSE) # All Hospitals summaryTable <- descr(hospitalData$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable$stats[, 6:11] <- list(NULL) attr(summaryTable$stats, "row.names") <- "Number of Beds" r2 <- descr(hospitalData$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(hospitalData$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable <- rbind(summaryTable$stats, r2$stats) summaryTable <- rbind(summaryTable, r3$stats) # Committed Hospitals summaryTable.C <- descr(CommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.C$stats[, 6:11] <- list(NULL) attr(summaryTable.C$stats, "row.names") <- "Number of Beds" r2 <- descr(CommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(CommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.C <- rbind(summaryTable.C$stats, r2$stats) summaryTable.C <- rbind(summaryTable.C, r3$stats) # NonCommittedRows Hospitals summaryTable.NC <- descr(NonCommittedRows$NofBeds, style = 'rmarkdown', transpose = TRUE) summaryTable.NC$stats[, 6:11] <- list(NULL) attr(summaryTable.NC$stats, "row.names") <- "Number of Beds" r2 <- descr(NonCommittedRows$NofSurgicalOperations, style = 'rmarkdown', transpose = TRUE) r2$stats[, 6:11] <- list(NULL) attr(r2$stats, "row.names") <- "Number of Surgical Procedures" r3 <- descr(NonCommittedRows$FullTimeEmployees, style = 'rmarkdown', transpose = TRUE) r3$stats[, 6:11] <- list(NULL) attr(r3$stats, "row.names") <- "Full Time Employees" summaryTable.NC <- rbind(summaryTable.NC$stats, r2$stats) summaryTable.NC <- rbind(summaryTable.NC, r3$stats) C.OrgControlCount <- CommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) NC.OrgControlCount <- NonCommittedRows %>% group_by(OrgControlOverall) %>% summarise(n = n()) ## histogram of demographics #ggplot(CommittedRows, aes(x = NofBeds)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = NofSurgicalOperations)) +     #geom_histogram() #ggplot(CommittedRows, aes(x = FullTimeEmployees)) +     #geom_histogram() # DEMOGRAPHIC DIFFERENCE IN MEAN TESTS # NofBeds NofBeds.Diff <- z.test(CommittedRows$NofBeds, NonCommittedRows$NofBeds, alternative = "two.sided", mu = 0, sigma.x = sd(CommittedRows$NofBeds), sigma.y = sd(NonCommittedRows$NofBeds)) # NofSurgicalOperations C.NofSurgicalOperations.val <- na.omit(CommittedRows$NofSurgicalOperations) NC.NofSurgicalOperations.val <- na.omit(NonCommittedRows$NofSurgicalOperations) C.NofSurgicalOperations.sd <- sd(CommittedRows$NofSurgicalOperations, na.rm = TRUE) NC.NofSurgicalOperations.sd <- sd(NonCommittedRows$NofSurgicalOperations, na.rm = TRUE) NofSurgicalOperations.Diff <- z.test(C.NofSurgicalOperations.val, NC.NofSurgicalOperations.val, alternative = "two.sided", mu = 0, sigma.x = C.NofSurgicalOperations.sd, sigma.y = NC.NofSurgicalOperations.sd) # FullTimeEmployees C.FullTimeEmployees.val <- na.omit(CommittedRows$FullTimeEmployees) NC.FullTimeEmployees.val <- na.omit(NonCommittedRows$FullTimeEmployees) C.FullTimeEmployees.sd <- sd(CommittedRows$FullTimeEmployees, na.rm = TRUE) NC.FullTimeEmployees.sd <- sd(NonCommittedRows$FullTimeEmployees, na.rm = TRUE) FullTimeEmployees.Diff <- z.test(C.FullTimeEmployees.val, NC.FullTimeEmployees.val, alternative = "two.sided", mu = 0, sigma.x = C.FullTimeEmployees.sd, sigma.y = NC.FullTimeEmployees.sd) # Response variable difference in mean tests PSI4.diff <- t.test(CommittedRows$PSI_4_SURG_COMP_Score, NonCommittedRows$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff <- t.test(CommittedRows$PSI_6_IAT_PTX_Score, NonCommittedRows$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff <- t.test(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff <- t.test(CommittedRows$PSI_14_POSTOP_DEHIS_Score, NonCommittedRows$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff <- t.test(CommittedRows$PSI_15_ACC_LAC_Score, NonCommittedRows$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff <- t.test(CommittedRows$PSI_90_SAFETY_Score, NonCommittedRows$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff <- t.test(CommittedRows$Domain2_Score, NonCommittedRows$Domain2_Score, alternative = "two.sided") HAC.diff <- t.test(CommittedRows$Total_HAC_Score, NonCommittedRows$Total_HAC_Score, alternative = "two.sided") # ANOVA between org control within each group C.PSI4.aov <- aov(CommittedRows$PSI_4_SURG_COMP_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI4.aov) C.PSI6.aov <- aov(CommittedRows$PSI_6_IAT_PTX_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI6.aov) C.PSI12.aov <- aov(CommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI12.aov) C.PSI14.aov <- aov(CommittedRows$PSI_14_POSTOP_DEHIS_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI14.aov) C.PSI15.aov <- aov(CommittedRows$PSI_15_ACC_LAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI15.aov) C.PSI90.aov <- aov(CommittedRows$PSI_90_SAFETY_Score ~ CommittedRows$OrgControlOverallNum) summary(C.PSI90.aov) # ANOVA results C.D2.aov <- aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) summary(C.D2.aov) C.HAC.aov <- aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum) summary(C.HAC.aov) # Tukey results C.D2.tukey <- TukeyHSD(aov(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum)) C.HAC.tukey <- TukeyHSD(aov(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)) # ANOVA results NC.PSI4.aov <- aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI4.aov) # Tukey results NC.PSI4.tukey <- TukeyHSD(aov(NonCommittedRows$PSI_4_SURG_COMP_Score ~ NonCommittedRows$OrgControlOverallNum)) NC.PSI6.aov <- aov(NonCommittedRows$PSI_6_IAT_PTX_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI6.aov) NC.PSI12.aov <- aov(NonCommittedRows$PSI_12_POSTOP_PULMEMB_DVT_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI12.aov) NC.PSI14.aov <- aov(NonCommittedRows$PSI_14_POSTOP_DEHIS_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI14.aov) NC.PSI15.aov <- aov(NonCommittedRows$PSI_15_ACC_LAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI15.aov) NC.PSI90.aov <- aov(NonCommittedRows$PSI_90_SAFETY_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.PSI90.aov) NC.D2.aov <- aov(NonCommittedRows$Domain2_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.D2.aov) NC.HANC.aov <- aov(NonCommittedRows$Total_HAC_Score ~ NonCommittedRows$OrgControlOverallNum) summary(NC.HANC.aov) #TUKEY RESULT SPECIFIC ANALYSIS (NOT SURE IF THIS IS VALID! THESE COMMANDS ARE MISSING SOME COMPARISONS) t.test(NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "greater") t.test(Committed.OrgControl2$Domain2_Score, Committed.OrgControl2$Domain2_Score, alternative = "greater") # split data among ownership types within committed vs non-committed Committed.OrgControl1 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "1") NonCommitted.OrgControl1 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "1") Committed.OrgControl2 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "2") NonCommitted.OrgControl2 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "2") Committed.OrgControl3 <- filter(CommittedRows, CommittedRows$OrgControlOverallNum == "3") NonCommitted.OrgControl3 <- filter(NonCommittedRows, NonCommittedRows$OrgControlOverallNum == "3") #t-tests PSI4.diff.org1 <- t.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org1 <- t.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org1 <- t.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org1 <- t.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org1 <- t.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org1 <- t.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org1 <- t.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") HAC.diff.org1 <- t.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") #Wilcox #PSI4.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #var.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score) #ansari.test(Committed.OrgControl1$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl1$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl1$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl1$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl1$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org1 <- wilcox.test(Committed.OrgControl1$PSI_90_SAFETY_Score, NonCommitted.OrgControl1$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org1 <- wilcox.test(Committed.OrgControl1$Domain2_Score, NonCommitted.OrgControl1$Domain2_Score, alternative = "two.sided") #HAC.diff.org1 <- wilcox.test(Committed.OrgControl1$Total_HAC_Score, NonCommitted.OrgControl1$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org1  # DIFFERENCE PSI6.diff.org1 PSI12.diff.org1 PSI14.diff.org1 PSI15.diff.org1 PSI90.diff.org1 D2.diff.org1 HAC.diff.org1 PSI4.diff.org2 <- t.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org2 <- t.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org2 <- t.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org2 <- t.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org2 <- t.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org2 <- t.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org2 <- t.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") HAC.diff.org2 <- t.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") #PSI4.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl2$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl2$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl2$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl2$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org2 <- wilcox.test(Committed.OrgControl2$PSI_90_SAFETY_Score, NonCommitted.OrgControl2$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org2 <- wilcox.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #var.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score) #ansari.test(Committed.OrgControl2$Domain2_Score, NonCommitted.OrgControl2$Domain2_Score, alternative = "two.sided") #HAC.diff.org2 <- wilcox.test(Committed.OrgControl2$Total_HAC_Score, NonCommitted.OrgControl2$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org2 PSI6.diff.org2 PSI12.diff.org2 #Difference PSI14.diff.org2 PSI15.diff.org2 PSI90.diff.org2 D2.diff.org2 # DIFFERENCE HAC.diff.org2 PSI4.diff.org3 <- t.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") PSI6.diff.org3 <- t.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") PSI12.diff.org3 <- t.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") PSI14.diff.org3 <- t.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") PSI15.diff.org3 <- t.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") PSI90.diff.org3 <- t.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") D2.diff.org3 <- t.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") HAC.diff.org3 <- t.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") #PSI4.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_4_SURG_COMP_Score, NonCommitted.OrgControl3$PSI_4_SURG_COMP_Score, alternative = "two.sided") #PSI6.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_6_IAT_PTX_Score, NonCommitted.OrgControl3$PSI_6_IAT_PTX_Score, alternative = "two.sided") #PSI12.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, NonCommitted.OrgControl3$PSI_12_POSTOP_PULMEMB_DVT_Score, alternative = "two.sided") #PSI14.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_14_POSTOP_DEHIS_Score, NonCommitted.OrgControl3$PSI_14_POSTOP_DEHIS_Score, alternative = "two.sided") #PSI15.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_15_ACC_LAC_Score, NonCommitted.OrgControl3$PSI_15_ACC_LAC_Score, alternative = "two.sided") #PSI90.diff.org3 <- wilcox.test(Committed.OrgControl3$PSI_90_SAFETY_Score, NonCommitted.OrgControl3$PSI_90_SAFETY_Score, alternative = "two.sided") #D2.diff.org3 <- wilcox.test(Committed.OrgControl3$Domain2_Score, NonCommitted.OrgControl3$Domain2_Score, alternative = "two.sided") #HAC.diff.org3 <- wilcox.test(Committed.OrgControl3$Total_HAC_Score, NonCommitted.OrgControl3$Total_HAC_Score, alternative = "two.sided") PSI4.diff.org3 PSI6.diff.org3 PSI12.diff.org3 PSI14.diff.org3 PSI15.diff.org3 PSI90.diff.org3 D2.diff.org3 HAC.diff.org3 # summarize results groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$/sd/n)", "NC($\\mu$/sd/n)", "t", "p") #groupTableHeaders <- c("Ownership Type", "Code", "C($\\mu$)", "C(sd)", "C(n)", "NC($\\mu$)", "NC(sd)", "NC(n)", "W", "p") #r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], round(PSI4.diff.org1$estimate[1], 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(Committed.OrgControl1), round(PSI4.diff.org1$estimate[2], 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), nrow(NonCommitted.OrgControl1), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) r1 <- data.frame(OrgControlOverallNames[1], row.names(measure.names)[1], paste(round(mean(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl1$PSI_4_SURG_COMP_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl1[, "PSI_4_SURG_COMP_Score"])), sep = "/"), round(PSI4.diff.org1$statistic, 2), as.character(round(PSI4.diff.org1$p.value, 10))) rownames(r1) <- 1:nrow(r1) colnames(r1) <- groupTableHeaders r2 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[3], paste(round(PSI12.diff.org2$estimate[1], 2), round(sd(Committed.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), paste(round(PSI12.diff.org2$estimate[2], 2), round(sd(NonCommitted.OrgControl2$PSI_12_POSTOP_PULMEMB_DVT_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "PSI_12_POSTOP_PULMEMB_DVT_Score"])), sep = "/"), round(PSI12.diff.org2$statistic, 2), as.character(round(PSI12.diff.org2$p.value, 3))) rownames(r2) <- 1:nrow(r2) colnames(r2) <- groupTableHeaders r3 <- data.frame(OrgControlOverallNames[3], row.names(measure.names)[7], paste(round(mean(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(Committed.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(Committed.OrgControl2[, "Domain2_Score"])), sep = "/"), paste(round(mean(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), round(sd(NonCommitted.OrgControl2$Domain2_Score, na.rm = TRUE), 2), sum(!is.na(NonCommitted.OrgControl2[, "Domain2_Score"])), sep = "/"), round(D2.diff.org2$statistic, 2), as.character(round(D2.diff.org2$p.value, 3))) rownames(r3) <- 1:nrow(r3) colnames(r3) <- groupTableHeaders groupTable = rbind(r1, r2, r3) #groupTable = rbind(r1, r3) rownames(groupTable) <- 1:nrow(groupTable) colnames(groupTable) <- groupTableHeaders EligibleForReductionHeaders <- c("Commitment", "Reduction", "No Reduction", "Unknown") C.Reduction <- CommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) C.NoReduction <- CommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) C.Missing <- sum(is.na(CommittedRows[, "Total_HAC_Score"])) C.E <- data.frame("Committed", C.Reduction, C.NoReduction, C.Missing) rownames(C.E) <- 1:nrow(C.E) colnames(C.E) <- EligibleForReductionHeaders NC.Reduction <- NonCommittedRows %>% filter(Total_HAC_Score > 6.75) %>% summarise(n = n()) NC.NoReduction <- NonCommittedRows %>% filter(Total_HAC_Score <= 6.75) %>% summarise(n = n()) NC.Missing <- sum(is.na(NonCommittedRows[, "Total_HAC_Score"])) NC.E <- data.frame("Non-committed", NC.Reduction, NC.NoReduction, NC.Missing) rownames(NC.E) <- 1:nrow(NC.E) colnames(NC.E) <- EligibleForReductionHeaders EligibleForReduction <- rbind(C.E, NC.E) #TESTING STUFF HERE #ggplot(NonCommittedRows, aes(x = PSI_4_SURG_COMP_Score)) + #geom_histogram() #ggplot(CommittedRows, aes(x = OrgControlOverall)) +     #geom_bar() ## check for normality ##qqPlot(CommittedRows$Domain2_Score) ##boxplot(CommittedRows$Domain2_Score) #ad.test(CommittedRows$Domain2_Score) ## check for equality of variances #leveneTest(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) ##ggplot(CommittedRows, aes(x = log(Domain2_Score)) + ##geom_histogram() ## Tranformations #library(MASS) #out <- boxcox(CommittedRows$Domain2_Score ~ CommittedRows$OrgControlOverallNum) #lambda <- round(out$x[which.max(out$y)], 1) #lambda ## transform data - create new column yt using boxcox lambda #CommittedRows <- mutate(CommittedRows, Domain2_Score_T = Domain2_Score ^ lambda) ## summarize data by Machine #CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score_T.avg = mean(Domain2_Score_T, na.rm = TRUE), Domain2_Score_T.sd = sd(Domain2_Score_T, na.rm = TRUE)) #CommittedRows %>% group_by(OrgControlOverallNum) %>% summarise(Domain2_Score.avg = mean(Domain2_Score, na.rm = TRUE), Domain2_Score.sd = sd(Domain2_Score, na.rm = TRUE)) ## check for normality on transformed data (transformed data is normal) #C.D2_T.aov <- aov(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum) #summary(C.D2_T.aov) #ad.test(residuals(C.D2_T.aov)) ## levene test on transformed data (indicates there is no difference in variance) #leveneTest(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum) ## bartlett test on transformed data (indicates there is no difference in variance) #bartlett.test(CommittedRows$Domain2_Score_T ~ CommittedRows$OrgControlOverallNum) #ggplot(CommittedRows, aes(x = Total_HAC_Score)) + #geom_histogram() ## check for normality #qqPlot(CommittedRows$Total_HAC_Score) #boxplot(CommittedRows$Total_HAC_Score) #ad.test(residuals(C.HAC.aov)) #leveneTest(CommittedRows$Total_HAC_Score ~ CommittedRows$OrgControlOverallNum)
